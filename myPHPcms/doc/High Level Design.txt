myPHPcms High Level Design
==========================

Version 0.1
-----------

Author: Phil Lee

EXECUTIVE SUMMARY

Blah blah !


1.0	SCOPE

The document details the design of the myPHPcms at the highest level.
The Functional Specification document is a list of 'must-have'
features or behaviours organised into modules and this document 
outlines how these features will actually be implemented.

No code descriptions can be found in this document.  Details of the
actual code can be found in the individual Module Detailed Design
document.  Instead, a list of scripts, their relationship with other
modules and justification for any decisions taken during the design 
process are presented.  Additionally a list of database tables and
their purposes ccan also be found within this document.

This document is designed to be used in conjunction with the Functional
Specification document when creating the Module Detailed Design 
documents.  It can also be used as the basis of the technical 
documentation.


2.0	REFERENCE DOCUMENTATION

The latest version of the myPHPcms Functional Specification which can
be found in the 'doc' directory.


3.0	SOFTWARE ARCHITECTURE

The whole of myPHPcms is designed to be modular so that the web-site
administrator can choose to install as much or as little functionality
as is required.  This will be possible through the development of a 
core of functionality that can have additional modules 'plugged in'
either at installation time or later in the life of the web-site.

The following is a list of software modules that are either included 
within myPHPcms by default or which may be installed separately.

CORE MODULES			OPTIONAL MODULES
* HTML library			* User comments
* Caching module		* User forums
* Templating module		* Links management
* Access logging module		* User polls
* User sign-up and login	* Download manager
* Site administration		* Site search module
* Core CMS functions		* Mailing list manager
				* Banner advert manager

In general a module will consist of a number of files each of which 
will carry out a specific task.  A module will also include files that
allow the administrator of the channel or site to administer the module.

An outline of the directory structure is shown below:

	$site_root		contains the bulk of the scripts for the
	|			site
    	|
    	+-admin			contains configuration & administrator
				scripts
    		+-libs		contains admin-only libraries
    		+-templates	contains admin-only template definitions
    	+-doc			contains usage and design documentation
    	+-libs			contains the actual script libraries for
				users
    	+-sql			contains the fragments of SQL necessary to 
				build the tables for the various modules
    	+-tests			contains test scripts to test the modules

It is antipcated that all scripts will be written in PHP.  There may be
a few HTML files together with a number of plain text files containing
configuration data for the site.

Security of the scripts will be the responsbility of both the web server
and also the scripts themselves.  All scripts will check that the user
has the appropriate authority to execute them (in the case of the forum
script only logged in users may post articles).  In addition the web
server built-in permissions will be used to discriminate between the
regular site visitors and the administrators through the use of the
.htaccess file and .htpasswd files.

3.1	HTML library

Blah blah !

3.2	Site administration module

* Default user is overall site admin called 'god'.  No password by
  default
* All user data stored in user table
* User profiles eg editor etc stored in another table
* Users can register themselves by only site admin can prmote users to
  author, editor etc roles

3.3	Database installation script

Blah blah !

3.4	CMS module

Blah blah !

3.5	User comments module

Blah blah !

3.6	User forums module

Blah blah !

3.7	Links manager module

Blah blah !

3.8	Access logging module

Blah blah !

3.9	Templating module

* Templates for admin engine have site-id=0
* All public site-ids start at 1

3.10	User registration and authentication module

Blah blah !

3.11	Polls module

* Should comprise of the following:
  polls.sql        - SQL code to create single table to store data
  poll_vote.php    - shows latest current poll and allows voting
  poll_show.php    - shows latest results
  poll_results.php - allows results of old polls to be searched for
                     and viewed
  admin_poll.php   - administration script to create/modify/delete
                     polls
* Must prevent user from voting in the same poll multiple times.  Can
  either be done using cookie or by logging their IP address (care !)
* Should provide graphical results but not use complex PHP features 
  like GD library as not all servers may support it.
  
3.12	Page caching module

* Set options in each file whether to cache and if so where to put the
  file afterwards.  Also et age of cached file.  When file loads, check
  to see if should be cached, if so check for presnce of cached file.
  If exists and not too old then use it else create more up to date
  version.

3.13	Download manager module

Blah blah !

3.14	Site search module

Blah blah !

3.15	Events module

Blah blah !

3.16	Mailing list manager module

Blah blah !

3.17	Banner advert manager module

Blah blah !

3.18	User rating system

Blah blah !


4.0	DESIGN AND CODING

Blah blah !


5.0	SECURITY ISSUES

Insert brief bullet point summary of points contained in the Coding
Guidelines in this section.   


App A	Technical notes

Blah blah (if required)
