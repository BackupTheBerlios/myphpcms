myPHPcms High Level Design
==========================

Version 0.1
-----------

Author: Phil Lee

EXECUTIVE SUMMARY

Blah blah !


1.0	SCOPE

The document details the design of the myPHPcms at the highest level.
The Functional Specification document is a list of 'must-have'
features or behaviours organised into modules and this document 
outlines how these features will actually be implemented.

No code descriptions can be found in this document.  Details of the
actual code can be found in the individual Module Detailed Design
document.  Instead, a list of scripts, their relationship with other
modules and justification for any decisions taken during the design 
process are presented.  Additionally a list of database tables and
their purposes can also be found within this document.

This document is designed to be used in conjunction with the Functional
Specification document when creating the Module Detailed Design 
documents.  It can also be used as the basis of the technical 
documentation.


2.0	REFERENCE DOCUMENTATION

The latest version of the myPHPcms Functional Specification which can
be found in the 'doc' directory.


3.0	SOFTWARE ARCHITECTURE

The whole of myPHPcms is designed to be modular so that the web-site
administrator can choose to install as much or as little functionality
as is required.  This will be possible through the development of a 
core of functionality that can have additional modules 'plugged in'
either at installation time or later in the life of the web-site.

The following is a list of software modules that are either included 
within myPHPcms by default or which may be installed separately.

CORE MODULES			OPTIONAL MODULES
* HTML library			* User comments
* Caching module		* User forums
* Templating module		* Links management
* Access logging module		* User polls
* User sign-up and login	* Download manager
* Site administration		* Site search module
* Core CMS functions		* Mailing list manager
				* Banner advert manager

In general a module will consist of a number of files each of which 
will carry out a specific task.  A module will also include files that
allow the administrator of the channel or site to administer the module.

An outline of the directory structure is shown below:

	$site_root		contains the bulk of the scripts for the
	|			site
    	|
    	+-admin			contains configuration & administrator
				scripts
    		+-libs		contains admin-only libraries
    		+-templates	contains admin-only template definitions
    	+-doc			contains usage and design documentation
    	+-libs			contains the actual script libraries for
				users
    	+-sql			contains the fragments of SQL necessary to 
				build the tables for the various modules
    	+-tests			contains test scripts to test the modules

It is antipcated that all scripts will be written in PHP.  There may be
a few HTML files together with a number of plain text files containing
configuration data for the site.

Security of the scripts will be the responsbility of both the web server
and also the scripts themselves.  All scripts will check that the user
has the appropriate authority to execute them (in the case of the forum
script only logged in users may post articles).  In addition the web
server built-in permissions will be used to discriminate between the
regular site visitors and the administrators through the use of the
.htaccess file and .htpasswd files.


4.0	Software Modules

Blah blah !

4.1	HTML library

Blah blah !

4.2	Site administration module

* Default user is overall site admin called 'god'.  No password by
  default
* All user data stored in user table
* User profiles eg editor etc stored in another table
* Users can register themselves by only site admin can promote users to
  author, editor etc roles

4.3	Installation script

The whole process of using myPHPcms should be as easy as possible.  
This should start from the moment that the product is downloaded and
the component files are unpacked into the web server directory.  

The complete archive file that is downloaded by the user should contain
the directory structure defined in section 3.0 Software Architecture
with the appropriate permissions on the files and directories.  However
in this state neither the database will exist nor will the administrator
scripts be protected from unauthorised users.

To counter these problems a number of steps need to be taken and these
should be automated through the use of an install script.  It is likely
at some point that an existing version of myPHPcms will be upgraded to
a newer version.  In this instance an upgrade script should be run that
will make the necessary modifications to the databases and scripts.

All of the setup scripts should reside in the admin directory.  Since 
these scripts will be executed before any other components of myPHPcms
is installed they will have to be entirely self-contained.  They cannot
make calls to the templating system or the user authentication system.  
It is possible, however, that they will be able to call a directly 
included setup library contained within a sub-directory of the admin 
directory.

To prevent an upgrade being performed on a database that has not yet
been installed the installation script should look for the presence of
a flag.  If found then this will be interpreted as a properly 
configured installation and so an upgrade will be assumed.  Otherwise a
new installation will assumed.

The steps that the installation script carries out are:

1.  Check for presence of a flag indicating that myPHPcms has already
    been installed.  If found call the upgrade script otherwise call
    the setup.php.
    
2.  Setup.php will display a form to allow gather the database host 
    name and the database username and password.  The password will
    be requested twice for verification.  Once submitted these values
    will be written to a text file called db.cfg
    
3.  The page will then reload and will attempt to connect to the
    database server.  If no connection can be established the form
    to gather the database username, hostname and address will be
    redisplayed so that the user can correct them.
    
4.  If the connection can be established then the administrator
    sign-up and login screen should be displayed so that the overall
    site administrator can enter their username and password and have
    their account activiated via email.
    
5.  Once the user is signed in the administration directory is 
    protected via Apache's .htaccess and .htpasswd files.

Files:	install.php	- script called by user to install myPHP.  
			  Checks to see if an existing installation is
			  present.  If so calls upgrade.php else calls
			  setup.php
	setup.php	- Sets up new installation from scratch.
	upgrade.php	- Upgrades existing installation.
	db.cfg		- Text file containing database settings.
	lib_setup.php	- Setup library contained within the admin/libs
			  directory.  This will provide all of the
			  functionality for the setup library.
			  
Needs:	access to the user sign-up and login functions

4.4	CMS module

Blah blah !

4.5	User comments module

Blah blah !

4.6	User forums module

Blah blah !

4.7	Links manager module

Blah blah !

4.8	Access logging module

Blah blah !

4.9	Templating module

To minimise the number of templates for a given number of pages any 
template should be capable of being made up of other templates.  This 
would allow the re-use of existing templates if small templates existed
for common page elements such as headers or footers.  This could be 
achieved by assigning each template a unique number and storing the 
relationships between the parent template and child templates that 
comprise it.

* Templates for admin engine have channel_id=0
* All public channel_id start at 1

4.10	User registration and authentication module

Since the username is the users email address this will need to be
validated.  This could be performed by a regular expression match on
the supplied email address.  If it fails then the user will be asked to
re-enter their email address.  If successful their choice of password
will be asked for again for confirmation - it will then be checked to 
see that it contains enough characters.  If it does not then it will 
requested again.  If successful the user will be added to the database
but marked as inactive.  An email will then be sent to the supplied 
email address which will open a custom URL when the user clicks on it 
thus activating the account.  The username and a unique id are then 
stored in the users browser as a cookie in order to prevent them from 
having to log in again.

4.11	Polls module

* Should comprise of the following:
  polls.sql        - SQL code to create single table to store data
  poll_vote.php    - shows latest current poll and allows voting
  poll_show.php    - shows latest results
  poll_results.php - allows results of old polls to be searched for
                     and viewed
  admin_poll.php   - administration script to create/modify/delete
                     polls
* Must prevent user from voting in the same poll multiple times.  Can
  either be done using cookie or by logging their IP address (care !)
* Should provide graphical results but not use complex PHP features 
  like GD library as not all servers may support it.
  
4.12	Page caching module

* Set options in each file whether to cache and if so where to put the
  file afterwards.  Also et age of cached file.  When file loads, check
  to see if should be cached, if so check for presnce of cached file.
  If exists and not too old then use it else create more up to date
  version.

4.13	Download manager module

Blah blah !

4.14	Site search module

Blah blah !

4.15	Events module

Blah blah !

4.16	Mailing list manager module

Blah blah !

4.17	Banner advert manager module

Blah blah !

4.18	User rating system

Blah blah !


5.0	DESIGN AND CODING

Blah blah !


6.0	SECURITY ISSUES

Insert brief bullet point summary of points contained in the Coding
Guidelines in this section.   


App A	Technical notes

Blah blah (if required)
