myPHPcms High Level Design
==========================

Version 0.1
-----------

Author: Phil Lee

EXECUTIVE SUMMARY

Blah blah !


1.0	SCOPE

The document details the design of the myPHPcms at the highest level.
The Functional Specification document is a list of 'must-have'
features or behaviours organised into modules and this document 
outlines how these features will actually be implemented.

No code descriptions can be found in this document.  Details of the
actual code can be found in the individual Module Detailed Design
document.  Instead, a list of scripts, their relationship with other
modules and justification for any decisions taken during the design 
process are presented.  Additionally a list of database tables and
their purposes can also be found within this document.

This document is designed to be used in conjunction with the Functional
Specification document when creating the Module Detailed Design 
documents.  It can also be used as the basis of the technical 
documentation.


2.0	REFERENCE DOCUMENTATION

The latest version of the myPHPcms Functional Specification which can
be found in the 'doc' directory.


3.0	SOFTWARE ARCHITECTURE

The whole of myPHPcms is designed to be modular so that the web-site
administrator can choose to install as much or as little functionality
as is required.  This will be possible through the development of a 
core of functionality that can have additional modules 'plugged in'
either at installation time or later in the life of the web-site.

The following is a list of software modules that are either included 
within myPHPcms by default or which may be installed separately.

CORE MODULES			OPTIONAL MODULES
* HTML library			* User comments
* Caching module		* User forums
* Templating module		* Links management
* Access logging module		* User polls
* User sign-up and login	* Download manager
* Site administration		* Site search module
* Channel administration	* Mailing list manager
* Core CMS functions		* Banner advert manager
* Diagnostics module
* Installation module

In general a module will consist of a number of files each of which 
will carry out a specific task.  A module will also include files that
allow the administrator of the channel or site to administer the module.

An outline of the directory structure is shown below:

	$site_root		contains the bulk of the scripts for the
	|			site
    	|
    	+-admin			contains configuration & administrator
				scripts for master site and channel
				administrators
		+-channel	contains channel admin functions
		+-master	contains master admin functions
    		+-libs		contains admin-only libraries
    		+-templates	contains admin-only template definitions
    	+-doc			contains usage and design documentation
    	+-libs			contains the actual script libraries for
				users
    	+-sql			contains the fragments of SQL necessary to 
				build the tables for the various modules
    	+-tests			contains test scripts to test the modules

It is antipcated that all scripts will be written in PHP.  There may be
a few HTML files together with a number of plain text files containing
configuration data for the site.

Security of the scripts will be the responsbility of both the web server
and also the scripts themselves.  All scripts will check that the user
has the appropriate authority to execute them (in the case of the forum
script only logged in users may post articles).  In addition the web
server built-in permissions will be used to discriminate between the
regular site visitors and the administrators through the use of the
.htaccess file and .htpasswd files.


4.0	Software Modules

This section describes the design of each of the software modules that
comprise myPHPcms at quite a high level.  The database design and the
view of each module as seen by the administrators and the users are also
described.

4.1	HTML library

This library allows the creation of properly formatted HTML code on the
fly.  This is then treated within the templating system as a temporary
template.  Typical uses might be the creation of HTML code to present
search results to the user.

4.1.1	Overview

Insert description here.

4.1.2	Database Design

Not applicable

4.1.2.1	Database tables created by this module

Not applicable

4.1.2.2	Database tables required by this module

Not applicable

4.1.3	Module dependencies

None.

4.1.4	Administrator View

The library is not viewable by the administrator.  However, a means of
translating HTML from WYSIWYG editors to templates would be useful.
However, in early releases this could be a document.

4.1.5	User View

The library is not viewable by the users.


4.2	Master administration module

This module allows the master site administrator to create, modify,
suspend or delete channels.  It also allows the collection of overall
site statistics from the logging system as well as those from the
individual channels.

4.2.1	Overview

Automatic back-up of web-site can be turned on/off from here.  Location
of back-up of whole site location can be set, as can time of back-up.
Username and password of site where back-up is stored.

Master administrator can also add one other master administrator and can
change email addresses and passwords of themselves only.

4.2.2	Database Design

4.2.2.1	Database tables created by this module

myPHPcms_channels:	channel_id's, administrator name, administrator
			email address, site name, site abbreviation (for
			cache and file images)

4.2.2.2	Database tables required by this module

myPHPcms_modules

4.2.3	Module dependencies

Probably requires HTML library
Will need user log-in and authentication.

4.2.4	Administrator View

Install and uninstall modules.  List installed modules.  Setting of
timezone offset for server.

4.2.5	User View

None.  The master administration module is not visible to the general
users.


4.3	Channel administration module

This module allows the channel administrators to administer their
channel.  This includes suspending users, approving postings etc.

4.3.1	Overview

4.3.2	Database Design

4.3.2.1	Database tables created by this module

4.3.2.2	Database tables required by this module

4.3.3	Module dependencies

4.3.4	Administrator View

* Users can register themselves by only site admin can promote users to
  author, editor etc roles

4.3.5	User View


4.4	Diagnostics module

4.4.1	Overview

4.4.2	Database Design

4.4.2.1	Database tables created by this module

4.4.2.2	Database tables required by this module

4.4.3	Module dependencies

4.4.4	Administrator View

4.4.5	User View


4.5	Installation script

4.5.1	Overview

The whole process of using myPHPcms should be as easy as possible.  
This should start from the moment that the product is downloaded and
the component files are unpacked into the web server directory.  

The complete archive file that is downloaded by the user should contain
the directory structure defined in section 3.0 Software Architecture
with the appropriate permissions on the files and directories.  However
in this state neither the database will exist nor will the administrator
scripts be protected from unauthorised users.

To counter these problems a number of steps need to be taken and these
should be automated through the use of an install script.  It is likely
at some point that an existing version of myPHPcms will be upgraded to
a newer version.  In this instance an upgrade script should be run that
will make the necessary modifications to the databases and scripts.

All of the setup scripts should reside in sub-directories of the admin
directory.  Since these scripts will be executed before any other 
components of myPHPcms are installed they will have to be entirely 
self-contained.  They cannot make calls to the templating system or the
user authentication system.  It is possible, however, that they will be
able to call a directly included setup library contained within a sub-
directory of the admin directory.

Since myPHPcms will require the use of PHP sessions, this and any other
module requirement should be checked for during the execution of the
installation script.  This can be done using the get_extension_funcs()
and get_loaded_extensions() functions.

4.5.2	Database Design

4.5.2.1	Database tables created by this module

myPHPcms_modules:	list of modules installed including name, 
			purpose, author, version

4.5.2.2	Database tables required by this module

myPHPcms_users
myPHPcms_groups

4.5.3	Module dependencies

4.5.4	Administrator View

4.5.5	User View


4.6	CMS module

4.6.1	Overview

4.6.1.1	Main page display script

When run this script checks for the presence of the cookie that 
indicates the user is registered on the site.  If the cookie is found,
then it retrieves the users name from the database and creates a 
temporary template contain the users name and a short welcome message.
Otherwise the temporary template contains a box for the user to log in 
or register.  The module then connects to the database, pulls out the 
latest story headlines and counts the number of comments for each 
story within the database.  Hyperlinks to the news stories are 
automatically embedded with the page HTML.  This data is then fed into 
the templating system in order to create the final HTML.

When the user clicks on the link to submit a news story the cookie that
indicates that they are a registered user should be checked.  If it 
cannot be found it would suggest that they are not a member or that the 
cookie has been deleted so they should be offered the option to 
register or sign-up.  Once logged in they are shown a form into which 
they can enter the story headline and the body of the story.  At any 
time they can preview the page as it will eventually appear.  Once 
submitted the story content and information (date, time, author) are 
entered into the database.

4.6.1.2	Story display script

When the user clicks on a news headline on the front page the story 
module connects to the database and pulls the headline and story 
content from the database.  It also connects to the database to 
retrieve the subjects of comments that users have posted.  The URL's 
of the page with the comment expanded to show it's full text are 
automatically embedded within the page.  All of this data is then 
passed to the templating system so that the page can be displayed in 
the users browser.

4.6.2	Database Design

4.6.2.1	Database tables created by this module

4.6.2.2	Database tables required by this module

4.6.3	Module dependencies

4.6.4	Administrator View

4.6.5	User View


4.7	Access logging module

4.7.1	Overview

The design requirements for the Access Logging module specified in the
Functional Specification document can be divided into two main areas.
These are (1) data gathering and (2) data processing and reporting.
Both are described in more detail in this section.

4.7.1.1	Data gathering

The logging system must be capable of collecting data from both static
HTML pages as well as dynamic PHP pages.  This would allow the system 
to be applied to purely static HTML sites as well as dynamically 
created sites and also the hybrid - a dynamically generated cache of
static HTML pages.

These two scenarios require fundamentally different approaches to 
obtaining the data that we need.  Pages that are created dynamically 
from a database can simply log access to themselves by recording the 
fact into a table within the database.  Once the information to be 
logged has been determine this is quick and easy to do.

Purely static HTML pages are much more difficult to deal with since it
is likely that the server on which they are hosted may not be capable 
of executing server-side scripting languages.  As a result a rather
ingenious solution needs to be developed.

The solution chosen is to use a GIF image that is in fact a PHP script
that is hosted on a server that can execute PHP scripts.  This GIF 
image is called by the HTML file allowing access to the HTTP enviroment
variables which can then be logged in the database by the PHP script.
Once the data has been collected a transparent GIF image 1 pixel wide 
by 1 pixel high is returned to the browser.  To prevent caching of the
image (which would defeat this technique) a random value is attached to 
a variable which is sent in the URL that requests the GIF.  This will 
be carried out using Javascript.

Knowing which pages the user requested is useful but of even more use
is knowing the route through the website that the user takes.  In 
theory this information can be deduced from the IP address of user and
the page referrers.  However this is risky because if two users from
the same ISP browse the site simultaneously then their IP address will
appear to be the same.  As a result the logging system will confuse
their movements through the site.

A far better method would be to track the individual web-browsers and 
this can be done through the use of PHP sessions.  Any PHP script can
start a session so technically there is no reason why the pseudo-GIF 
image, which is in fact a PHP script, cannot be configured to start a
session and then place that into the database.

Knowing the the users are visiting the site and are navigating their 
way around it is useful but the final piece in the jigsaw would to find
out how long the pages take to load.

This could be done by using two PHP scripts or two GIF files, one at 
the very top of the document and one at the bottom.  The downside to
this approach is that it requires two database hits.  The first would
identify the browser as before and would obtain a timestamp when the 
page was first requested.  The browser data would be INSERT'ed into 
the database but the page load time would be set to zero.  The second 
database hit occurs at the end of the page loading process when the 
MySQL data row is UPDATE'd with the overall page loading time.

If the page load is cancelled or does not compete the page load time 
value in the database will not be updated and these pages can then be
identified by the fact that they have a zero page loading time.  This
can be used to identify which are the most commonly cancelled or
problematic web pages.

Having determine the pages that the users view, their viewing habits 
and amount of tolerance to slow loading pages, their preference for web
browsers should also be detected.  This can be done by obtaining the
browsers user agent and then parsing this.  Any user agents that
cannot be identified should be emailed to the master site administrator
for identification and upgrading of the system.  Since new browsers are 
released fairly frequently the browser detection code should be 
contained in a separate library so that it may be upgraded without 
having to take the entire system down.  

The user agents could be stored in a database but in order to minimise
the load on the database the decision has been taken to hard-code the
detection routine.

4.7.1.2	Data processing and reporting

Unlike some logging systems, this one will only query the database when
requested to by the channel or master administrator.  This allows the
latest results to be used and prevents decisions being made on out of
date data.

In order to provide maximum flexibility all queries will be able to be
run over various time periods ranging from 'this day' to 'this week' to
'this year'.

Where external data is required for analysis, for example where the host
name is resolved via a reverse DNS lookup, then this data will be cached
in order to speed up subsequent queries.

Possible queries that could be run against the database range from the 
very simple such as "total number of page views since start of logging"
to "show the path through the site of user number 3 today".  Exactly 
how these queries will be constructed, processed and reported can be
found in the Access Logging Detailed Design document.

All output from the access logging module will be created as a local
template in the templating system through the use of the HTML library.

4.7.2	Database Design

4.7.2.1	Database tables created by this module

myPHPcms_logging_log:
myPHPcms_logging_cache:
myPHPcms_logging_unknown:

4.7.2.2	Database tables required by this module

4.7.3	Module dependencies

4.7.4	Administrator View

4.7.5	User View


4.8	Templating module

4.8.1	Overview

To minimise the number of templates for a given number of pages any 
template should be capable of being made up of other templates.  This 
would allow the re-use of existing templates if small templates existed
for common page elements such as headers or footers.  This could be 
achieved by assigning each template a unique number and storing the 
relationships between the parent template and child templates that 
comprise it.

4.8.2	Database Design

4.8.2.1	Database tables created by this module

4.8.2.2	Database tables required by this module

4.8.3	Module dependencies

4.8.4	Administrator View

4.8.5	User View

* Templates for admin engine have channel_id=0
* All public channel_id start at 1


4.9	User sign-up and log-in module

4.9.1	Overview

Since the username is the users email address this will need to be
validated.  This could be performed by a regular expression match on
the supplied email address.  If it fails then the user will be asked to
re-enter their email address.  If successful their choice of password
will be asked for again for confirmation - it will then be checked to 
see that it contains enough characters.  If it does not then it will 
requested again.  If successful the user will be added to the database
but marked as inactive.  An email will then be sent to the supplied 
email address which will open a custom URL when the user clicks on it 
thus activating the account.  The username and a unique id are then 
stored in the users browser as a cookie in order to prevent them from 
having to log in again.

4.9.2	Database Design

4.2.2.1	Database tables created by this module

myPHPcms_users:
myPHPcms_groups:

4.2.2.2	Database tables required by this module

4.9.3	Module dependencies

4.9.4	Administrator View

4.9.5	User View


4.10	Page caching module

4.10.1	Overview

* Set options in each file whether to cache and if so where to put the
  file afterwards.  Also set age of cached file.  When file loads, check
  to see if should be cached, if so check for presnce of cached file.
  If exists and not too old then use it else create more up to date
  version.

4.10.2	Database Design

4.10.2.1Database tables created by this module

4.10.2.2Database tables required by this module

4.10.3	Modules dependencies

4.10.4	Administrator View

4.10.5	User View


4.11	Comments module

4.11.1	Overview

When the user clicks on a link to add a comment the cookie that 
indicates that are registered is checked.  If it cannot be found then 
the user is invited to register otherwise the user is presented with a 
form into which they can enter their comments.  At any time they can 
preview their contribution.  When they press submit the information that 
they have entered together with other information (date, time, author) 
is entered into the database.  The page is then recreated from the 
database and is displayed to the user.

4.11.2	Database Design

4.11.2.1Database tables created by this module

4.11.2.2Database tables required by this module

4.11.3	Module dependencies

4.11.4	Administrator View

4.11.5	User View


4.12	Forums module

4.12.1	Overview

4.12.2	Database Design

4.12.2.1Database tables created by this module

4.12.2.2Database tables required by this module

4.12.3	Module dependencies

4.12.4	Administrator View

4.12.5	User View


4.13	Links manager module

4.13.1	Overview

4.13.2	Database Design

4.13.2.1Database tables created by this module

4.13.2.2Database tables required by this module

4.13.3	Module dependencies

4.13.4	Administrator View

4.13.5	User View


4.14	Polls module

4.14.1	Overview

* Should comprise of the following:
  polls.sql        - SQL code to create single table to store data
  poll_vote.php    - shows latest current poll and allows voting
  poll_show.php    - shows latest results
  poll_results.php - allows results of old polls to be searched for
                     and viewed
  admin_poll.php   - administration script to create/modify/delete
                     polls
* Must prevent user from voting in the same poll multiple times.  Can
  either be done using cookie or by logging their IP address (care !)
* Should provide graphical results but not use complex PHP features 
  like GD library as not all servers may support it.

4.14.2	Database Design

4.14.2.1Database tables created by this module

4.14.2.2Database tables required by this module

4.14.3	Module dependencies

4.14.4	Administrator View

4.14.5	User View


4.15	Download manager module

4.15.1	Overview

4.15.2	Database Design

4.15.2.1Database tables created by this module

4.15.2.2Database tables required by this module

4.15.3	Module dependencies

4.15.4	Administrator View

4.15.5	User View


4.16	Site search module

4.16.1	Overview

4.16.2	Database Design

4.16.2.1Database tables created by this module

4.16.2.2Database tables required by this module

4.16.3	Module dependencies

4.16.4	Administrator View

4.16.5	User View


4.17	Eventlogging module

4.17.1	Overview

4.17.2	Database Design

4.17.2.1Database tables created by this module

4.17.2.2Database tables required by this module

4.17.3	Module dependencies

4.17.4	Administrator View

4.17.5	User View


4.18	Mailing list manager module

4.18.1	Overview

4.18.2	Database Design

4.18.2.1Database tables created by this module

4.18.2.2Database tables required by this module

4.18.3	Module dependencies

4.18.4	Administrator View

4.18.5	User View


4.19	Banner advert manager module

4.19.1	Overview

4.19.2	Database Design

4.19.2.1Database tables created by this module

4.19.2.2Database tables required by this module

4.19.3	Module dependencies

4.19.4	Administrator View

4.19.5	User View


4.20	User rating system

4.20.1	Overview

4.20.2	Database Design

4.20.2.1Database tables created by this module

4.20.2.2Database tables required by this module

4.20.3	Module dependencies

4.20.4	Administrator View

4.20.5	User View


5.0	DESIGN AND CODING

Blah blah !

6.0	SECURITY ISSUES

All user input must be screened before being entered into a file, 
database or passed through to an system execution command.  The 
following functions should be used:

* the addslashes() function should be used to filter user data before
  it is passed to the database.  This function will escape out 
  characters   which might be troublesome to the database.  The 
  function stripslashes() is used to restore the data to its original 
  form.
  
* the function escapeshellcmd() should be used when passing user data 
  to a system() or exec() call or to backticks.  This will escape out
  any metacharacters that can be used to force the system to run
  arbitrary commands entered by a malicious user.
  
* the function strip_tags() can be used to remove HTML and PHP tags
  from a string.  This can be used to remove malicious scripts from
  user data that might get echoed back to the browser.
  
* the htmlspecialcharacters() function will convert HTML characters
  to their HTML entity equivalents.  For example < will be converted to
  &lt.  This will render any script tags to be harmless.

App A	Technical notes

Blah blah (if required)
