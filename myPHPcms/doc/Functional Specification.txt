myPHPcms Functional Specification
=================================

Version 0.3
-----------

Author: Phil Lee

EXECUTIVE SUMMARY

This document specifies the functionality required in the project 
myPHPcms which is a PHP/MySQL based content management system (CMS).

myPHPcms has been designed to allow the easy creation of feature-rich
dynamic websites by allowing webmasters to install only the modules
that they want in addition to the core system modules.  Additional
modules can be installed at any time.

The core functionality consists of a templating system , an HTML 
library for the generation of HTML on-the-fly, a caching module, a
browser detection system, an automated installation procedure, a
user sign-up and authentication module, site and channel administration
tools and the core CMS system.

The use of a templating system and an HTML library means that the 
logical code and presentation code are entirely separated.  Caching 
of the most frequently requested pages will result in a speed increase
through the reduction in database requests.

Additional modules will be available to allow the webmaster to offer
forums, news and reviews, user comments, mailing lists and user
management capabilities.

myPHPcms will be written so that multiple channels can be delivered 
from the same server.  A top level administrator will have control over
the creation of sub-sites or channels.  Individual channels will be
administered by separate administrators appointed by the top-level
administrator.

myPHPcms has been designed from the outset to make the best use of the 
hardware that it runs on and to be easy to set-up and administer.

1.0	SCOPE

This document describes the myPHPcms Content Management System (CMS) 
which is to be developed as an Open Source project under the GPL (GNU
Public License).  

myPHPcms allows the development of feature-rich dynamic database-driven
websites by combining PHP with a MySQL back-end.  The core functionality
offers:

	* HTML library
	* Caching module
	* Template module
	* Access logging module
	* User sign-up and login module
	* Installation scripts
	* Site administration module
	* Channel administration module
	* Core Content Management System functions (news, stories, reviews)
	* Diagnostics module

Additional modules will allow the expansion of the channel capabilities to
include (but not be limited to):
	
	* User comments on stories, articles, reviews etc
	* User forums
	* Links management module
	* User Polls module
	* Download manager module
	* Site search module
	* Events module
	* Mailing list manager module
	* Banner advert manager module

All of the above features will be available as a modules.  Most will
require database access and will comprise several scripts, some of
which will allow the administration of the module to a selected group
of users.  The installation of the relevant database tables and the
location of the scripts into the correct directories will all be taken
care of automatically by an install script.

Some Content Management Systems mix the logical code with the code
that handles the presentation of the site to the user which makes
modifying the default site design very difficult.  It also makes fixing
software errors diffcult as the code is very convuluted.  Others have
clearly been designed by software engineers and, as such, require a 
detailed understanding of the back-end of the code in order to customise
the site.  This understanding takes time to develop and it is just this
amount of commitment that web masters are reluctant to give.  As a result
many otherwise excellent CMS systems have not had the take up that they
should.

myPHPcms will avoids this trap by separating the logical code and the
presentation code through the use of templates that can be administered
from a web interface.  Any HTML that needs to be generated on-the-fly
can be created using an HTML generation library included and documented
with this package.


2.0	REFERENCE DOCUMENTATION

Any relevant web-based articles are listed in the individual module
specifications contained in Section 7 of this document.


3.0	HARDWARE REQUIREMENTS

The hardware requirements are modest - any server capable of running 
recent versions of Apache, MySQL and PHP simultaneously should be able 
to run myPHPcms.  However, in order to improve the user experience, 
the fastest hardware available should be used.


4.0	SOFTWARE REQUIREMENTS

Any recent version of Linux (2.2.14 or higher) can be used.  Recent
versions of Apache (1.3.17 or higher) and MySQL (3.23.27 or higher) are
also required.

All code will be developed on a machine that has a standard 
installation of Apache, PHP and MySQL - no additional modules or extra
compilation switches will be used.  This will allow myPHPcms to be 
installed on as many machines as possible.


5.0	GENERAL REQUIREMENTS AND ASSUMPTIONS

myPHPcms requires the following:

   * Adequate disk space to install the scripts that comprise myPHPcms
   * Web browser access to the directory where the administration 
     scripts are located to allow the creation of the appropriate 
     configuration files.
   * Access to database server running MySQL (either the same machine
     or on another accessible networked machine)
   * Permission to allow creation and access a database and tables on
     this machine


6.0	SECURITY ISSUES

myPHPcms will be written to be as secure as possible without requiring 
special configuration to be carried out on the server.  This will 
allow it to be implemented on as many servers as possible.

In order to achieve this level of secutiry all known exploits must be 
prevented.  This will require knowledge of the various exploits and the
means to their prevention.  A list of measures that must be taken to 
avoid introducing potential exploits into the code can be found in the 
Coding Guidelines document.

Any code that is written by external authors MUST adhere to the coding
guidelines otherwise the contributed code will not be accepted into the
main development tree.


7.0	SOFTWARE ENVIRONMENT

myPHPcms should be modular to allow the addition (and removal) of
minor as required.  This should be as painless for the user to
do as possible.

In order to modularise the code a clear directory structure should
be used into which the scripts and their associated libraries are
installed.

Functions that are common across several files should be contained 
within a uniquely named library.  All libraries should be installed 
into the main libs directory unless they are for use by the 
administrators only.

Other scripts should be installed in the top level directory and their 
names should be unique in order to prevent files from different modules
over-writing files in already in the directory.  

Administration files should be placed in the admin directory whilst any
administration-related libraries should be placed in the administration
library directory.

As the whole of myPHPcms will be run off of a database, the lack of a
database due to perhaps a server outage must be handled gracefully.

7.1	HTML library

* Separates HTML from PHP by replacing HTML with series of calls to a
  library that creates the HTML (so no HTML appears anywhere in code).
* Dynamically generated HTML can be applied to local templates so that
  same template within webpage can have different contents according to
  logic within channel.
* Channel administrator needs simple tool to convert from raw HTML to 
  the calls necessary to contruct the HTML by the library
* Form based HTML editor allows cut and paste of HTML from eg 
  Dreamweaver which is then converted into PHP calls and is displayed
  in another form page
* Code is correctly indented (formatted)
* HTML library supports common HTML 4.0 tags
* HTML library will support Cascading Style Sheets level 1
* Should be extensible to produce valid XHTML 1.0 code
* Code produced should be browser neutral and should validate using any
  commonly available HTML validator eg Tidy

7.2	Site administration module

* Master administrator only has rights to administer publication 
  channels
* Channels can be added
* Channels can be suspended
* Channels can be deleted
* Master administrator can get logging information and statistics on
  channels

7.3	Channel administration module

* Administration scripts stored in protected directory using the .htaccess
  and .htpasswd files
* Only channel administrators can run the scripts
* Administration scripts for individual modules added by each module
  installation script
* Links to the administration scripts for each installed module are 
  added to the admininstration screen automatically
* Multiple channels can be handled
* Each channel administrator has full control over their own channel
* Each channels emails are prefixed by brief descriptor eg MTB-Wales or STM
* Channel configuration options, eg Require approval of user images, 
  are stored separately for each channel
* Channel administrator can get basic information about channel eg 
  number of registered users, number of story views, total number of 
  articles stored etc
* Channel administrator can disable certain users if required on their
  channel only

7.4	Diagnostics module

* Logs all channel activity to individual log files
* Logs error messages
* Channel administrators can view error messages

7.5	Installation script

* Installation procedure requires unpacking of archive into a suitable
  directory on the web-server
* Pointing a web-browser to the setup script will take display a form 
  that allows the database server, name, username and password to be
  entered.  These will be written to the configuration file.  The top
  level administrators name username and password can then be entered
  and validated via email.  The admin scripts will then be password
  protected by .htaccess and .htpasswd files.
* The scripts will then create the database tables necessary for the
  functioning of the site.
* Once completed, user will be given advice on securing their site
  installation  
  
7.6	CMS module

* Workflow model: template designer->author->editor->moderator->user
* Registered channel users can opt-in as writers
* Requests for story commissions can be listed to registered writers only
* Commissioned stories can be marked as taken
* News, reviews etc contributed directly (not comissioned)
* Category type selected by author when submitting
* Authors can work on story on-line using web-form.
* Multiple ownership allows co-authoring
* Editor can review stories once author has released it for review.
* Editor can re-assign submission to different area ie news->feature
* Reviewers notified via email
* Editor can preview story as it would appear when published
* Writer profiles available to editor
* If a story needs further work, writer should be notified via email
* If approved by editor story can be scheduled for publication
* On final sign-off editor decides key-words for search function
* Revision history of document available at all times
* Documents can be checked out for editing by single author at a time
* Editor can also identify similar stories when approving for 
  publication
* Multiple stories can be queued for publication 
* Multiple editors can be defined: editor, deputy editor and section
  editors
* Editor comments to writer are stored separately
* Revision information for story is also stored
* Images etc are stored in gallery directory for each channel.  Database
  stores filename, size, type and description
* Writer profile available with story when published
* System can handle multiple channels
* Should allow users to select printable version of a document/story
* Should allow long documents to be split over several pages
* Document life can be defined (permanent, expires or repeats)
* Actions to take if document reaches end of life can be selected eg 
  archive, delete, email for update
* No knowledge of HTML required to enter content into templates
* Contributed pages may have the following states: new, saved, waiting for
  approval, approved, declined, expired, published, page expired, page
  deleted
* Whenever registered user logs in who has a role eg editor, moderator etc
  their outstanding tasks are listed

7.7	Access logging module

* Must be able to detect all common browsers
* Must be able to detect search engine spiders
* Should be able to determine platform
* Should be able to determine the operating system
* Should be usable from PHP and HTML pages (to allow caching)
* Should email unknown user agent strings to site admin
* Users should not be aware of its presence
* Administrator should be able to look at results over different time 
  periods eg today, yesterday, this week, last week, this month, last
  month, this quarter, this year, last year
* Reporting function should provide the following information:
	* total files requested
	* total hits on channel
	* total pages served
	* total visits to channel
	* total unique sites that have visited
	* total unique URL's served
	* total unique referers
	* total unique user agents
	* hits per hour (average and maximum)
	* hits per day (average and maximum)
	* files per day (average and maximum)
	* pages per day (average and maximum)
	* visits per day (average and maximum)
	* path through site (based on PHP session - dynamic sites only)
	* all statistics displayed as top X of Y where X can be defined
	  and Y is the total number in that category since logging 
	  began
* Administrator should be able to see which pages are most popular, least
  popular, top referers, top exit pages, top search queries etc
* System can handle multiple channels
* Would be desireable for the logging system to record the amount of time
  taken for a page to be accessed each time it is accessed

7.8	Templating module

* Administrators can create/edit/delete templates
* Templates are specific to different channels
* Channel id=0 is reserved for top-level administration templates only
* First hosted channel will have channel_id=1, second 2 etc
* Read-only admin and default templates
* All modifications can be completed from a web-browser
* New or modified templates can be previewed before going live on 
  channel
* Template definitions stored in session file to avoid MySQL queries
  to retrieve them for every page load
* Templates can be defined as permanent or time-decaying
* Age of time-decaying templates can be set
* Templates variables contained with HTML like tags so that WYSIWYG
  HTML editors can create them

7.9	User sign-up and login module

* Users should be able to register a username and password
* Process should be register-> confirm via email -> login -> logout
* Username should be email address
* Username (email address) should be checked or correct format
* Usernames that have not been verified should be deleted from the
  database after an elaspsed period eg one month
* Restrictions on password should be enforced
* Passwords will be stored in the database in an encrypted form for 
  security
* User should be able to log with the details that they registered with
* Users should be able to log out when they have finished using the 
  channel.  If possible users should be automatically logged out after 
  a pre-defined period of inactivity.
* Channel needs to check if user is logged in and restrict access to 
  parts of the channel for authorised users only.
* Users should be able to update their passwords.
* Users should be able to reset or apply for new passwords if they
  forget their current one.
* Users should be able to submit small images of themselves which will
  be used to identify them in articles and forum postings.  These
  images will be less than 3KB and will be named after the unique user
  id eg 3142.gif
* Administrators must approve these images before they can be used.  An
  email will be automatically sent (although this can be turned off in
  the admin module).
* Users will be able to provide brief biographic details about 
  themselves including: sex, DOB, homepage, location.
* System can handle multiple sites
* Users fall into 1 of 3 groups: visitor, contributor, editor.  Appointed
  by overall channel admin.

7.10	Page caching module

* The page caching system should be an integral part of the templating
  system and should not be created as a standalone feature although it
  can be turned on and off for individual pages.
* Caching should be selectable on a page by page basis.  The age of the
  cached version before it expires should be selectable too.
* If a page is set to be cached and it is requested the cache directory
  should be checked for a cached copy to avoid unnecessary database calls
* If a cached copy is NOT found then all of the HTML code for the page
  should be written to a file which should then be served to the browser.
  This file code should also be written to a text file and placed in the
  appropriate place within the directory structure.  Any HTML links in 
  the page should be retained so that the original PHP script is called.
  This would allow the deletion of the cached version (perhaps because 
  the template is too old) and its recreation would be handled gracefully.
* Subsequent requests for that page should be directed to the cached
  version unless the page has expired in which case the cached file 
  should be rebuilt.
* Updates to the page should be reflected in the cached version
* A folder directory structure should be used so that search engines can
  index the site as HTML pages
* Code produced should be browser neutral and should validate using any
  commonly available HTML validator.
* Caching system should be able to handle multiple sites
* Individual sites are cached into different directories
* Cached pages should contain the appropriate code to log the page access
  within the logging system.
* Might be an idea to store cached files produced by a script in a 
  directory named after the script that produced the cached file.
* To prevent images and multimedia elements not working these should
  be hard-coded using absolute paths.  Alternative might be to use
  <BASE HREF="http://www.mtb-wales.com"> tag in cached file.
* To prevent two visitors reusing the same cached file at the same 
  time use flock().

7.11	User comments module

* Users can create comments against news items, stories, reviews etc
* Only registered user can enter comments
* Responses must be displayed in threaded manner
* Number of posts, time/date of last post, number of views are displayed
  next to comment heading
* Username and IP address of user that posted is stored in database
* Administrators can delete comments if required
* System can handle multiple channels

7.12	Forums module

* Anyone can read the contents of the forum but only registered users
  can contribute to the disucssion
* Users can start new threads by posting a new article
* Users can post articles in reply to existing articles
* Users can view articles that have been posted
* Users can view the threads of conversations in the forum
* Users can view the relationship between articles
* Administrators can delete posts and threads (if required)
* Administrators can move posts to different forums
* Administrators can create topic areas
* Users are notified by email when replies to there posts are posted
* Users can use the small images of themselves to accompany their posts
* Each thread shows the number of posts, number of views and date/time
  of last post
* Forum threads can be searched by poster or keyword
* System can handle multiple channels

7.13	Links manager module

* Users can search for URL's by category
* Users can search for URL descriptions by keyword
* Users can submit new URL's into directory
* Administrators can delete old or broken links
* Users can report broken links
* Links open in new window
* Opening of link is stored in logging system as exit page
* Administrators are notified of new link submission
* Links not displayed in database unless admin has approved it
* Number of visits to given link is stored
* Users can look at the most popular links
* System can handle multiple channels

7.14	Polls module

* Channel administrator can enter single question and up to 5 possible 
  answers.
* Channel administrator can set when poll will be active and when it 
  will close
* Only registered users can vote in the polls
* If unregistered user attempts to vote they are directed to login page
* Users can vote on each poll once per day only - user_id and timestamp
  is stored.
* All users can view current results of poll
* All users can view results of previous polls
* Results can be viewed as graphs or as tables of numbers
* Graphical representation should be through use of multiple instances
  of a small GIF image rather than using the PHP GD library as not all
  servers may support this.
* Once voter has voted (optional) they can be shown the results so far
* Results should present total number of votes cast and breakdown by 
  number of votes together with precentages rounded to 2 decimal places.
  Should also state when poll was opened and how much time remains 
  before the poll closes.
* Script should not be tripped up by "divison by zero" errors as a 
  result of no votes being cast.
* System can handle multiple channels
  
7.15	Download manager module

* Administrators can place files into a library area ready for download
* Files can have a description associated with them
* Files can be schedule for release on or after certain date
* Registered users can download these files
* Database keeps track of total downloads, time/date of last download
* Reports most popular download
* System can handle multiple channels

7.16	Channel search module

* Users can search channel by keywords
* Administrators generate keywords when article/story/review/
  feature approved for publication
* System can handle multiple channels
* List of common words (noise words) not included in database
* Should also store all searches for analysis by channel admin
* Results should be split up into manageable chunks of say 20 items.
  Each item should have a short summary text with it to aid the user in
  locating relevant results within the overall result set.

7.17	Events module

* Registered users can post events into the calender
* Email address of event organiser/enterer is recorded when event is
  logged.
* All users can view contents of calender
* Events can be stored under pre-set categories
* Only channel administrator can create/modify/delete categories
* Calender is shown in 'desk calender' style.
* Day with event is shown by hyperlinked day number.
* Users can click on event to get more information
* Once event is over poster should be automatically asked for report
* What's On box should show upcoming events
* Users can search based on categories or time period
* System can handle multiple channels
* Navigation should be based on "page-turning" metaphor so that the
  current month is displayed with arrows to previous and next months
* Must be able to handle different server/browser timezones otherwise
  users will be confused by script reporting US time

7.18	Mailing list manager module

* Channel administrators should be able to set up and modify 
  announcement only mailing lists
* Channel administrators should be able to send text and HTML 
  newsletters to all the subscribers of a single mailing list
* Channel administrators should be able to create the newsletters on-
  line
* Newsletters should be previewable before sending
* Newsletter sending should be schedulable so that the newletter can
  be prepared off-line and sent a few days later.
* Users should be able to subscribe to each mailing list of interest
* Users should be able to unsubscribe from mailing lists that they are
  subscribed to quickly.
* The email address that the newsletter was sent to should be included
  at the bottom of the email
* Channel administrator should be able to define standard headers and 
  footers for use in newsletters
* Users should be able to store their preferences for text or HTML 
  emails
* Users should not be able to send mail to the list although if they do
  they will get a polite reply directing them to use the forums on the
  channel !
* Users should not be able to see one anothers email addresses
* Users and administrators should be able to view inforamtion about the
  mailing lists
* Past newsletters should be archived and should be viewable by users
  and administrators
* System can handle multiple channels

7.19	Banner advert manager module

* Manage multiple clients
* Each client should have their own login
* Manage multiple banners per client
* Banners cane be of any size
* View daily, overall and summary statistics
* Send statistics to clients via email
* Use HTML, GIF, JPEG and PNG-banners
* Show random, pre-defined or HTML/image banners
* Activiate and de-activiate individual banners
* System can handle multiple sites
* As clients approach number of purchased impressions they are sent
  email reminder to renew
* Banners can be stored locally or remotely
* Banners can be set to expire either within given perio (min 1 day) or
  after certain number of impressions
* Should be able to serve ads even if database is down through use of
  caching
* Should be able to handle multiple channels
  
7.20	User rating system

* Allows users to rate a page on it's usefulness to them
* Administrator can set scale (0->n)
* Displays number of users that have rated the page and the average 
  rating that they have given it
* Graphical and textual summary
* Should be able to handle multiple channels

8.0	PERFORMANCE

* Overall application designed to minimise number of database hits
* Almost all content is generated and stored statically unless it is
  needed on a regular basis
* Achieved by combination of templating and caching system
  
9.0	DOCUMENTATION

All modules will be fully documented by a detailed design document, a
README file and an INSTALL file.  MySQL table definitions will also be
supplied as will interfaces to the libraries.

<ENDS>

