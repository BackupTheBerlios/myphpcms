myPHPcms Functional Specification
=================================

Version 0.1
-----------

Author: Phil Lee

EXECUTIVE SUMMARY

This Functional Specification specifies the functionality in the 
project myPHPcms which is a PHP/MySQL based content management system.
It has been designed from the outset to make the best of the hardware
that it runs on and to be easy to set-up and administer.

myPHPcms has been designed to allow the easy creation of feature-rich
dynamic websites.  It recognises that not all web-masters want all of
the features that are available in the full package.  It does this by
being split into core functionality and additional modules that extend
the site capabilities.

The core functionality consists of a templating system , an HTML 
library for the generation of HTML on-the-fly, a caching module, a
browser detection system, an automated installation procedure, a
user sign-up and authentication module, and a news submission/display
module.

The use of a templating system and an HTML library means that the 
logical code and presentation code (HTML) are entirely separated.  
Caching of the most frequently requested pages will result in a 
speed increase through the reduction in database requests.

Additional modules will be available to allow the webmaster to offer
forums, news and reviews, user comments, mailing lists and user
management capabilities.


1.0	SCOPE

This document describes the myPHPcms Content Management System (CMS) 
which is to be developed as an Open Source project under the GPL (GNU
Public License).  

myPHPcms allows the development of feature-rich dynamic database-driven
websites by combining PHP with a MySQL back-end.  The core functionality
offers:

	* HTML library
	* Caching module
	* Template module
	* Access logging module
	* User sign-up and login module
	* Installation scripts
	* Site admininstration module
	* Core Content Management System functions (news, stories, reviews)

Additional modules will allow the expansion of the sites capabilities to
include (but not be limited to):
	
	* User comments on stories, articles, reviews etc
	* User forums
	* Links management module
	* User Polls module
	* Download manager module
	* Site search module
	* Events module
	* Mailing list manager module
	* Banner advert manager module
	* User article reviews

All of the above features will be available as a modules.  Most will
require database access and will comprise several scripts, some of
which will allow the administration of the module to a selected group
of users.  The installation of the relavent database tables and the
location of the scripts into the correct directories will all be taken
care of automatically.

Some Content Management Ssystems mix the logical code with the code
that handles the presentation of the site to the user which makes
modifying the default site design very difficult.  It also makes fixing
software errors diifcult as the code is very convuluted.  Others have
clearly been designed by software engineers and, as such, require a 
detailed understanding of the back-end of the code in order to customise
the site.  This understanding takes time to develop and it is just this
amount of commitment that web masters are reluctant to give.  As a result
many otherwise excellent CMS systems have not had the take up that they
should.

myPHPcms will avoids this trap by separating the logical code and the
presentation code through the use of templates that can be administered
from a web interface.  Any HTML that needs to be generated on-the-fly
can be created using an HTML generation library included and documented
with this package.


2.0	REFERENCE DOCUMENTATION

Any relevant web-based articles are listed in the individual module
specifications contained in Section 6 of this document.


3.0	HARDWARE REQUIREMENTS

The hardware requirements are modest - any server capable of running
Apache, MySQL and PHP should be able to run myPHPcms.  However, in 
order to improve the user experience, the fastest hardware available
should be used.


4.0	SOFTWARE REQUIREMENTS

Any recent version of Linux (2.2.14 or higher) can be used.  Recent
versions of Apache (1.3.17 or higher) and MySQL (3.23.27 or higher) are
also required.


5.0	GENERAL REQUIREMENTS AND ASSUMPTIONS

* Access to database server running MySQL
* Permission to allow the creation and access to a database on this server
* Adequate disk space to install the scripts that comprise myPHPcms
* No detailed knowledge of MySQL or PHP is required to set-up the software
  as an INSTALL script is provided.


6.0	SECURITY ISSUES

* All inputs and uploads from users will be checked and invalid inputs
  will be rejected.  Any suspicious activity will be logged and the
  site administrator will be notified.


7.0	SOFTWARE ENVIRONMENT

The following is a list of software modules that are either included 
within myPHPcms by default or which may be installed separately.  In
general a module will consist of a number of files each of which will
carry out a specific task.  

Functions that are common across several files should be contained 
within a uniquely named library.  All libraries should be installed 
into the main libs directory.

Other scripts should be installed in the top level directory and their 
names should be unique in order to files from different modules over-
writing files in already in the directory.  

Administration files should be placed in the admin directory whilst any
administration-related libraries should be placed in the admin/libs
directory.

An outline of the directory structure is shown below:

	$site_root	contains the bulk of the scripts for the site
    	|
    	+-admin		contains configuration & administrator scripts
    		+-libs	contains admin-only libraries
    	+-doc		contains usage and design documentation
    	+-libs		contains the actual script libraries
    	+-sql		contains the fragments of SQL necessary to 
    			 build the tables for the various modules
    	+-tests		contains test scripts to test the modules

As the whole of myPHPcms will be run off of a database, the lack of a
database due to perhaps a server outage must be handled gracefully.

7.1	HTML library

* Separates HTML from PHP by replacing HTML with series of calls to a
  library that creates the HTML (so no HTML appears anywhere in code).
* Dynamically generated html can be applied to local templates so that
  same template within webpage can have different contents according to
  logic within site.
* Site administrator needs simple tool to convert from raw HTML to the
  calls necessary to contruct the HTML by the library
* Form based HTML editor allows cut and paste of HTML from eg 
  Dreamweaver which is then converted into PHP calls and is displayed
  in another form page
* Code is correctly indented
* HTML library supports common HTML tags
* HTML library will support Cascading Style Sheets

7.2	Site administration module

* Administration scripts stored in protected directory
* Only administrator can run the scripts
* Administration scripts for individual modules added by each module
  installation script
* Administration scripts for each installed module are added to the
  admininsration screen automatically
* Multiple sites can be handled
* Each site administrator has limited control over their own site
* Main administrator has total control

7.3	Database installation script

* Installation procedure requires unpacking of archive into a suitable
  directory on the web-server
* A configuration file will need to be edited to set database hostname,
  database name, database user and password.
* Pointing a web-browser to the setup script will take these values and
  will creates the necessary tables (as per phpWebSite)
* once completed, user will be given advice on securing their site
  installation  
  
7.4	CMS module

* Workflow model: template designer->author->editor->moerator->user
* Registered site users can opt-in as writers
* Requests for story commissions can be listed to writers only
* Commissioned stories can be marked as taken
* News, features etc contributed directly (not comissioned)
* Category type selected by author when submitting
* Authors can work on story on-line using web-form.  Images can be
  uploaded and are kept with the story.
* Multiple ownership (up to 4 authors0 allows co-authoring
* Editor can review stories once author has released it for review.
* Editor can re-assign submission to different area ie news->feature
* Reviewers notified via email
* Editor can preview story as it would appear when published
* Writer profiles available to editor
* If a story needs further work, writer should be notified via email
* If approved by editor story can be scheduled for publication
* On final sign-off editor decides key-words for search function
* Revision history of document available at all times
* Editor can also identify similar stories
* Multiple stories can be queued for publication 
* Multiple editors can be defined: editor, deputy editor and section
  editors
* Editor comments to writer are stored separately
* Version information for story is also stored
* Writer profile available with story when published
* System can handle multiple sites
* Should allow users to select printable version of a document/story
* Should allow long documents to be split over several pages
* Document life can be defined
* Actions to take if docuent reaches end of life can be selected eg 
  archive, delete, email for update
* Multimedia content stored in central directory with database meta data

7.5	User comments module

* Users can create comments against news items, stories, reviews etc
* Only registered user can enter comments
* Responses must be displayed in threaded manner
* Number of posts, time/date of last post, number of views are displayed
  next to comment heading
* username and IP address of user that posted is stored in database
* Administrators can deleted comments if required
* System can handle multiple sites

7.6	User forums module

* Anyone can read the contents of the forum but only registered users
  can contribute to the disucssion
* Users can start new threads by posting a new article
* Users can post articles in reply to existing articles
* Users can view articles that have been posted
* Users can view th threads of conversations in the forum
* Users can view the relationship between articles
* Administrators can delete posts and threads (if required)
* Administrators can move posts to different forums
* Administrators can create topic areas
* Users are notified by email when replies to there posts are posted
* Users can upload small images of themselves to accompany their posts
* Administrators must approve these images before they can be used
* Each thread shows the number of posts, number of views and date/time
  of last post
* Forum threads can be searched by poster or keyword
* System can handle multiple sites

7.7	Links manager module

* Users can search for URL's by category
* Users can search for URL descriptions by keyword
* Users can submit new URL's into directory
* Administrators can delete old or broken links
* Users can report broken links
* Links open in new window
* Opening of link is stored in logging system as exit page
* Administrators are notified of new link submission
* Links not displayed in database unless admin has approved it
* Number of visits to given link is stored
* Users can look at the most popular links
* System can handle multiple sites

7.8	Access logging module

* Must be able to detect all common browsers
* Must be able to detect search engine spiders
* Should be able to determine platform
* Should be able to determine the operating system
* Should be usuable from PHP and html pages (to allow caching)
* Should be able to email unknown user agent strings to site admin
* Users should not be aware of its presence
* Administrator should be able to look at results over different time 
  periods eg today, yesterday, this week, last week, this month, last
  month, this quarter, this year, last year
* Administrator should be able to see which pages are most popular, least
  popular, top referers, top exit pages, top search queries etc
* System can handle multiple sites

7.9	Templating module

* Administrators can create/edit/delete templates
* Templates are specific to different sites
* Read-only admin and default templates
* All modifications can be completed from a web-browser
* Templates can be previewed before going live on site
* Template definitions stored in session file to avoid MySQL queries
  to retrieve them for every page load
* Templates can be defined as permanent or time-decaying
* Age of time-decaying templates can be set
* Templates variables contained with HTML like tags so that WYSIWYG
  HTML editors can create them

7.10	User sign-up and login module

* Users should be able to register a username and password
* Restrictions on username and password should be enforced
* Passwords will be stored in the database in an encrypted form for 
  security
* User should be able to log with the details that they registered with
* Users should be able to log out when they have inished using the 
  site.  If possible users should be automatically logged out after a
  pre-defined period of inactivity.
* Site needs to check if user is logged in and restrict access to parts
  of the site for authorised users only.
* Users should be able to update their passwords.
* Users should be able to reset or apply for new passwords if they
  forget their current one.
* System can handle multiple sites
* Users fall into 1 of 3 categories: visitor, contributor, editor

7.11	Polls module

* Administrator can enter questions and maximum of 5 possible answers.
* Administrator can set when poll will be active and when it will close
* Users can vote on each poll once per day only
* Multiple voting prevented by use of cookie - IP logging would not work
  since IP addresses of ISP's would be forwarded onto database
* Users can view current results of poll
* Users can view results of previous polls
* System can handle multiple sites
* Results can be viewed as graphs or as tables of numbers
* Once voter has voted (optionall) they can be shown the results so far

7.12	Page caching module

* Caching should be selectable on a page by page basis.  The age of the
  cached version should be selectable too.
* If a page is set to be cached and it is requested the cache directory
  should be checked for a cached copy
* If a cached copy is NOT found then all of the HTML code for the page
  should be written to a file which should then be served to the browser.
  Any HTML links in the page should be retained so that the original PHP
  script is called.  This would allow the deletion of the cached version
  (perhaps because the template is too old) and its recreation would be
  handled gracefully.
* Subsequent requests for that page should be directed to the cached
  version
* A folder directory structure should be used so that search engines can
  index the site as HTML pages
* Caching system should be able to handle multiple sites
* Individual sites are cached into different directories
  
7.13	Download manager module

* Administrators can place files into a library area ready for download
* Files can have a description associated with them
* Files can be schedule for release on or after certain date
* Registered users can download these files
* Database keeps track of total downloads, time/date of last download
* Reports most popular download
* System can handle multiple sites

7.14	Site search module

* Users can search site by keywords
* Administrators generate keywords when article/story/review/
  feature approved for publication
* System can handle multiple sites

7.15	Events module

* Registered users can post events into the calender
* Events can be stored under pre-set categories
* Users can create new categories if required (requires admin approval)
* Calender is visible to all users.  Shown in 'desk calender' style.
* Day with event is shown by hyperlinked day number
* Users can click on event to get more information
* Once event is over poster should be automatically asked for report
* What's On box should show upcoming events
* Users can search based on categories or time period
* System can handle multiple sites

7.16	Mailing list manager module

* Administrators should be able to set up and modify announcement only
  mailing lists
* Administrators should be able to send text and HTML newsletters to
  all the subscribers of a single mailing list
* Administrators should be able to create the newsletters on-line
* Newsletters should be previewable before sending
* Newsletter sending should be schedulable
* Users should be able to subscribe to each mailing list of interest
* Users should be able to unsubscribe from mailing lists that they are
  subscribed to
* Users should be able to store their preferences for text or HTML 
  emails
* Users should not be able to send mail to the list
* Users shold not be able to see one anothers email addresses
* Users and administrators should be able to view inforamtion about the
  mailing lists
* Past newsletters should be archived and should be viewable by users
  and administrators
* System can handle multiple sites

7.17	Banner advert manager module

* manage multiple clients
* each client should have their own login
* manage multiple banners per client
* banners cane be of any size
* view daily, overall and summary statistics
* send statistics to clients via email
* use HTML, GIF, JPEG and PNG-banners
* show random, pre-defined or HTML/image banners
* activiate and de-activiate individual banners
* system can handle multiple sites
* as clients approach number of purchased impressions they are sent
  email reminder to renew
* banners can be stored locally or remotely
* banners can be set to expire either within given perio (min 1 day) or
  after certain number of impressions
  
7.18	User rating system

* Allows users to rate a page on it's usefulness to them
* Administrator can set scale (0->n)
* Displays number of users that have rated the page and the average 
  rating that they have given it
* Graphical and textual summary

8.0	PERFORMANCE

* Overall site designed to minimise number of database hits
* Almost all content is generated and stored statically unless it is
  needed on a regular basis
* Achieved by combination of templating and caching system
  
9.0	DOCUMENTATION

All modules will be fully documented by a detailed design document, a
README file and an INSTALL file.  MySQL table definitions will also be
supplied as will interfaces to the libraries.

<ENDS>

