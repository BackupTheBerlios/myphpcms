myPHPcms Detailed Design document - Access Logging module
=========================================================

Version 0.1
-----------

EXECUTIVE SUMMARY

This document describes in detail the Access Logging Module.  It
provides information on the design of the module, the database design,
the individual scripts, any dependencies that these scripts may have 
and provides detailed references for each function in each component
file or library.

1.0	SCOPE

This document describes the design and operation of the Access Logging
module that allows page accesses to the website or channels to be 
logged to a database.  This database can be interogated at any time by
the site or channel administrators to determine the numbers of users, 
the most popular web browser and platforms and the most frequently 
requested web pages.

The system can be used with both PHP scripts and static HTML pages 
allowing this system to be used to track both dynamic and static web
sites together with those that mix the two together through the use
of a static cache of dynamically generated web pages.


2.0	REFERENCE DOCUMENTATION

myPHPcms Functional Specification
myPHPcms High Level Design document


3.0	OVERVIEW

This section details the requirements of the Access logging section,
explains how these requirements will be met and how the resulting
system should be used.

3.1	Requirements

The Functional Specification document specifies the functionality of
the logging system.  These requirements have been grouped together and
are expanded upon in this section.

3.1.1	General considerations

The Access logging system should be usable from both PHP scripts and
HTML pages to allow caching of dynamic content into static HTML pages.

The system should be capable of monitoring multiple web-sites or 
multiple channels on the same web-site.

The system should be fast and largely invisible to the visitors to the
websites or channels that are monitored by the system.

3.1.2	Browser and version detection

The system must be able to detect all common web-browsers that are
available to the general public on a variety of platforms and operating
systems.

The system must be able to detect all common search engine spiders.

Any browser user agents that are not identified should be stored in a
database table and the user agent string should be emailed to the 
master site administrator.

3.1.3	Browser platform

The system should be able to detect all commonly occuring hardware
platforms.

3.1.4	Operating system

The system should be able to detect all commonly occuring operating
systems.

3.1.5	Page loading time

The system should be capable of measuring the time that each page takes
to download to the users browser.  This should be possible regardless of
whether dynamic pages or static pages are being monitored.

3.1.6	User tracking

The system should be capable of recording the pages that users view as
they travel through the web-site or channels.  This should allows the
retrieval of a specific viewers path from entry to exit.

3.1.7	Exit pages

The system should be capable of recording any external links that users
select that take them out of the site.

3.1.8	Reporting options

The system should be capable of providing accurate information in an 
easy to use but flexible way.  Data should be viewable over different
timescales and the amount of data returned should be customisable.  All
data must be rendered by the HTML library.

The system must be able to distinguish between two page views and total
visitors on a channel-by-channel basis.


3.2	Solution

This section describes how the requirements detailed above will be met.

3.2.1	General consideration

The Access Logging system consists of a number of scripts that collect
the data from the users web-browser.  These can used directly on pages
that are dynamically generated as the scripts can be include'd into the
script source code.  For static pages a GIF image file points to an
'image' file on a server that can execute PHP scripts.  This image file
is actually a PHP script which logs the same data as the dedicated 
scripts and then returns a real GIF image to the users browser.  

This system can be used on multiple sites by setting a variable that 
identifies a unique site or channel.  This variable is passed directly 
to the database in the case of the dynamic page logger or can be 
encoded in the image URL if used on static pages.

The speed of this system has been optimised in order to make it as fast
as possible so that it's use does not spoil the user experience of the
site.  Where this system is used on dynamically generated pages the
speed will be governed purely by the time taken to communicate with the
database server.  Static pages will take longer as there are three 
steps involved in each logging transaction:

	1. the web server must contact and request the GIF image from
	   the server running the logging system
	   
	2. the server running the logging system must then enter the
	   information into the database which may or may not be on the
	   same physical machine
	   
	3. the GIF image must then be returned to the browser that
	   requested it.
	   
Items 1 and 2 are beyond the control of the logging system but item 3
can, by making the GIF image as small as possible (1 pixel by 1 pixel),
reduce the amount of data transferred.  Delayed writes to the database
are not possible using this system as the UPDATE must happen to an 
existing row.  If teh write is delayed the row will not exist and the
update will fail leading to page views not be logged.

3.2.2	Browser and version detection

All web browsers identify themselves to web servers through the use of
a browser User Agent string that can be parsed to obtain information on
the browser vendor, version number, operating system and platform.

Search engine spiders also provide a User Agent string but this usually
only identifies the search engine.  However, this is sufficient to 
indicate that the site has been searched and may well be indexed soon.

As new browsers are released the database of User Agents needs to be 
kept up to date and this burden is eased by the storage of any User 
Agent that cannot be identified.  Optionally this unknown User Agent 
can be emailed to the master site administrator.

The code that identifies the browser is contained with lib_browser.php
This code is separate so that the definitions can be updated easily 
without impacting the operation of the rest of the system.  The 
definitions are not stored in a database in order to reduce the load
on the database.

3.2.3	Browser platform

By parsing the Browser User Agent string the browser platform can be 
determined.

3.2.4	Operating system

By parsing the Browser User Agent string the operating system that the 
browser runs on can be determined.

3.2.5	Page loading time

It is desirable to measure how long particular pages take to load and 
this can be achieved by the logging system whether the pages are static
or dynamically generated.

Static pages require the use of two small GIF images (start.php and 
finish.php) which are located at the very top and very bottom of the 
page to be monitored.  These are linked within the web server using PHP
sessions so that the server can determine that the two scripts relate 
to the same page.

Dynamic pages are dealt with in a similar way but through the use of
two PHP scripts inc_start.php and inc_finish.php which perform exactly
the same functions as start.php and finish.php.

When the page is initially requested, either inc_start.php or start.php
insert the page name, assorted browser and referrer information and a
page time of zero.  A PHP session is then started in which various
variables, including the timestamp of the request, are registered that
are specific to the page being requested.  When the page completes 
loading, either inc_finish.php or finish.php look for the page and 
browser information and then computes the total page load time by 
computing the difference between the current time and the store 
timestamp.  This is then inserted into the database by an UPDATE
statement.

If for any reason the page loading is cancelled, then the page time is
left as zero, allowing those pages that were cancelled to be easily 
identified by querying the database.

3.2.6	User tracking

Whenever a web browser requests a page that calls the logging system a
cryptographically unique session identifier is generated that remains
associated with the browser for the lifetime of the browser window.  
This means that the sequence of pages displayed by the server can be
related to a particular browser thus allowing the movement history of
a particular user to the stored in the database.

3.2.7	Exit pages

When the user leaves the site it can be desirable to know where they 
are going.  This can be useful in the context of tracking whether users
click on a banner or a link to another website.  To allow this to be
monitored the redir.php wrapper can be used around the HTML href tag.
An example of this is shown below:

  	<a href="http://www.mtb-wales.com/STM_logging/redir.php
  	   ?c=site_id&s=PageName&e=http://www.phpbuilder.com">
  	   PHP Builder</a>

This inserts the URL of the link that the user has clicked on together 
with other data that can be gleaned from the execution of the script
(browser, operating, system, platform, session ID etc).  The target URL
is then opened in the same window as the request was made.  The 
following variables are required:
	
	c = integer site or channel ID
	s = name of page that this script is embedded on
	e = destination web page or site address

3.2.8	Reporting options

Having collected all of the data an easy to use method of interrogating
the database is required.  There are a fairly limited number of queries
that the master site or channel administrator is likely to want to run
and these are listed below:

	* number of hourly requests
	* browser information
	* most commonly requested pages
	* least commonly requested pages
	* total number of page impressions
	* most common referrers
	* most common hosts
	* most common searches
	* most common operating system
	* most common channel entry pages
	* most common exit pages
	* number of unique visitors
	* fastest loading pages
	* slowest loading pages
	* most commonly cancelled pages
	* number of pages viewed by visitors
	* path through site of specified visitor

Almost all of these queries can be run over different time periods in
order to allow historical tracking of users to be performed.  Allowed
time periods are: 'today', 'yesterday', 'thisweek', 'thismonth', 
'thisquarter' and 'thisyear'.

As the web site gets older more and more data will be returned from 
these queries so the number of items returned can be customised.  All 
queries can be run for a specific channel or for the whole site.

All reports will be generated using lib_html.php and will be produced
as dynamic templates with the templating system.

3.3	Usage

The logging system can be applied to either PHP pages or HTML pages.  
Any requests made to the webserver will result in the following 
information being stored.

	* day
	* hour
	* session_id
	* site_id
	* user_id (where applicable)
	* browser
	* ver
	* platform
	* time
	* page or script name containing logging script
	* page loading time
	* ip_address of client viewing web page
	* referrer URL
	* exit_page (where applicable)

This data can be gathered from either dynamically generated pages or
static HTML pages as described in the following sections.

3.3.1	Dynamically generated PHP pages

The loading of a dynamically generated page can be captured by 
include'ing the following code fragment at the very start of the 
document creation script:

	include("$site_root/logging/inc_start.php");

The completion of the script loading can be captured by include'ing the
following fragement of code at the very end of the document creation
script:

	include("$site_root/logging/inc_finish.php");

The following variables need to be defined for the correct operation of
the logging system:

	$site_id = integer to uniquely identify the site
	$site_root = string that defines absolute path to web-site eg
	             /usr/local/apache/htdocs

3.3.2	Static HTML pages

Accesses to static HTML pages can be captured in a similar way through
the use of a GIF image called by two scripts.

In order to capture the start of the page loading process the following
HTML code fragment must be included as close to the top of the page as
possible:
	
	<img src="http://www.mtb-wales.com/STM_logging/start.php
	?c=0&s=index.html" width='1' height='1'>
	
The completion of the page loading process can be captured by including
the following HTML fragement as close to the bottom of the page as is
possible:

	<img src="http://www.mtb-wales.com/STM_logging/finish.php
	?c=0&s=index.html" width='1' height='1'>

The variables that must be defined and passed within the URL are:

	c = integer to uniquely identify the site
	s = name of page (no spaces)
	
Once both of the scripts have executed a GIF file is passed straight
through to the browser.

3.4	Administration

This section is not yet complete.


4.0	DATABASE DESIGN

The structure of the SQL tables required by the logging system are 
defined in the file logging.sql

4.1	Table: myPHPcms_logging_log

	+------------+--------------+------+-----+---------+
	| Field      | Type         | Null | Key | Default |
	+------------+--------------+------+-----+---------+
	| day        | int(11)      |      |     | 0       |
	| hour       | int(11)      |      |     | 0       |
	| session_id | varchar(32)  | YES  |     | unknown |
	| site_id    | int(11)      | YES  |     | NULL    |
	| user_id    | int(11)      | YES  |     | NULL    |
	| browser    | varchar(20)  |      |     |         |
	| ver        | float        |      |     | 0       |
	| platform   | varchar(8)   |      |     | OTHER   |
	| time       | int(11)      |      |     | 0       |
	| page       | text         | YES  |     | NULL    |
	| page_time  | float        |      |     | 0       |
	| ip_address | varchar(15)  |      |     | unknown |
	| referrer   | varchar(255) |      |     | unknown |
	| exit_page  | varchar(255) |      |     | unknown |
	+------------+--------------+------+-----+---------+

4.2	Table: myPHPcms_logging_cache

Host name and IP address data is stored in the following format in 
MySQL in table logging_cache:

	+-------------+--------------+------+-----+------------+
	| Field       | Type         | Null | Key | Default    |
	+-------------+--------------+------+-----+------------+
	| ip_address  | varchar(15)  |      | PRI |            |
	| remote_host | varchar(255) |      |     | unresolved |
	+-------------+--------------+------+-----+------------+
	
4.3	Table: myPHPcms_logging_unknown

The user agent string is stored in the following format in the MySQL 
table logging_unknown

	+------------+--------------+------+-----+---------+
	| Field      | Type         | Null | Key | Default |
	+------------+--------------+------+-----+---------+
	| user_agent | varchar(255) |      | PRI |         |
	+------------+--------------+------+-----+---------+


5.0	SOFTWARE COMPONENTS

The access logging system consists of the following files:

5.1	$SITE_ROOT/admin/adm_statistics.php

	This script allows the processing of the data gathered by the
	logging system.  It is intended to be executed by the site or
	channel administrators only.
	
5.2	$SITE_ROOT/admin/libs/lib_statistics.php

	This is the library that interrogates the database in order to
	provide the administrator with statistical information on the
	channel of interest.

5.3	$SITE_ROOT/logging/inc_start.php

	This is the code snippet that is required to log access to PHP
	scripts.  It must be included into the script whose activity is
	to be logged at the very top of the script.
		
5.4	$SITE_ROOT/logging/inc_finish.php

	This is the code snippet that is required to log access to PHP
	scripts.  It must be included into the script whose activity is
	to be logged at the very top of the script.

5.5	$SITE_ROOT/logging/start.php

	This script collects the information for the logging system and
	inserts it into the database.  It provides exactly the same 
	information as inc_start.php described above.  It must be placed
	at the top of the file so that the start of the file loading 
	process can be captured.  Once completed the clear.gif image file
	is returned to the user browser.

5.6	$SITE_ROOT/logging/finish.php

	This script records the completion of the page loading process
	and determines the total page load time.  It then UPDATES the
	previous SQL INSERT with the timing information.
	
5.7 	$SITE_ROOT/logging/clear.gif

	This is a 1 pixel by 1 pixel transparent GIF file that is 
	echoed back to the users browser by the gif11.php script after 
	the logging information has been gathered.

5.8	$SITE_ROOT/logging/redir.php

	This script is used to wrap up destination URL's in order that
	user clicks onto hyperlinks can be tracked.  This script can
	also be used to track banner advert clicks (if required).

5.9	$SITE_ROOT/sql/logging.sql

	This is the SQL that creates the tables necessary for the 
	correct operation of the logging system.
	
5.10	$SITE_ROOT/libs/lib_browser.php

	This is the library that identifies the browser type and 
	version, the operating system and the hardware platform from
	the User Agent string reported by the browser.


6.0	DEPENDENCIES

This module requires access to the database in order to store the data
that it collects about the users browser.  In order to identify the 
users browser this module requires the browser identification library
lib_browser.php.

Site or channel indentifiers will be assigned by the administration module.

7.0	REFERENCE

This section describes in detail the internal and external functions
that are available in each of the scripts that make up the Access 
Logging module.  The functions are grouped together by script name.

7.1	adm_statistics.php

This is the administration module for the access logging system.  It is
located in a directory to which only the master site and channel 
administrators have access to.

7.1.1	function hourly_requests($link_id, $site_id, $timescale)

	Lists the number of hits per hour for the given $site_id and 
	$timescale.

7.1.2	function browser_types($link_id, $site_id, $timescale)

	Lists the browser name, vesion, platform and percentage share 
	of all requests for the specfied $site_id over the specified 
	$timescale in descending order of popularity.

7.1.3	function top_pages($link_id, $site_id, $timescale, $max_num)

	Lists the most frequently requested pages for the site with the 
	matching $site_id over the time period $timescale in descending
	order.  Results are limited to $max_num rows of data.

7.1.4	function bottom_pages($link_id, $site_id, $timescale, $max_num)

	Lists the least popular pages for the site matching $site_id 
	over the time period $timescale.  Results are limited to the 
	$max_num rows.

7.1.5	function total_page_views($link_id, $site_id)

	Determines the total number of page requests since the site 
	began logging.

7.1.6	function top_referrers($link_id, $site_id, $timescale, $max_num,
		$site_home)

	Lists the most common referers for site $site_id over the time 
	period $timescale.  Results are limited to $max_num rows.  The 
	returned values are presented as hyperlinks so that they may be 
	clicked.
	
7.1.7	function top_hosts($link_id, $site_id, $timescale, $max_num)

	Lists the most common hosts that request pages for site 
	$site_id over the time period $timescale.  Results are 
	limited to $max_num rows.  Where possible the host IP 
	addresses are resolved via a reverse DNS lookup.  To speed 
	subsequent runs of this query the host IP addresses and names 
	are cached in the database table logging_cache.  The returned
	values are presented as hyperlinks so that they may be clicked
	for investigation.

7.1.8	function searches($link_id, $site_id, $timescale, $max_num)

	Lists the most common queries that have been executed to find 
	the site.  This information is obtained by searching all 
	referring URLs for the words 'search' and 'query'.  Results are
	limited to $max_num rows.
     
7.1.8	function operating_sys($link_id, $site_id, $timescale, $max_num,
		$site_home)

	Lists the most common operating systems used to access the site
	$site_id over the specified time scale $timeperiod.  The number
	of rows returned is limited to $max_num.

7.1.9	function top_entry($link_id, $site_id, $timescale, $max_num)

	Lists the most commonly seen page by visitors when they enter 
	the site $site_id.  In theory this will be the home page but if
	enough traffic comes in from a link then it may be the page 
	that has been linked to.  The time period over which the query 
	runs can be set from the $timescale variable.  The number of 
	rows returned is defined by the value of the $max_num variable.

7.1.10	function top_exit($link_id, $site_id, $timescale, $max_num)

	Lists the most commonly exit page from site $site_id to 
	allow the estimation of traffic flows to another site or 
	perhaps an advert.  The number of rows returned is set by 
	$max_num.

7.2.11	function unique_visitors($link_id, $site_id, $timescale)

	Determines the number of unique visitors to the specified 
	channel over the timescale given.

7.2.12	function fastest_pages($link_id, $site_id, $timescale, $max_num)

	Lists the fastest loading pages for the channel specified over
	the time period specified.  The maximumm number of results 
	returned can be limited.

7.2.13	function slowest_pages($link_id, $site_id, $timescale, $max_num)

	Lists the slowest loading pages for the channel specified over
	the time period specified.  The maximumm number of results 
	returned can be limited.

7.2.14	function cancelled_pages($link_id, $site_id, $timescale, $max_num)

	List the most frequently cancelled pages for the channel 
	specified over the time period given.  The maximum number of
	results can be limited.

7.2.15	function session_pages($link_id, $site_id, $timescale, $max_num)

	Determines the number of pages that each visitor viewed for the
	specified channel over the time period stated.  The maximum
	number of results can be limited.

7.2.16	function session_path($link_id, $site_id, $session_id)

	Determines the pages that were viewed by a specified session for
	for the given channel.

7.2	lib_statistics.php

This is the query library for the administration module for the access
logging system.  It is placed in the admin/lib directory where only the
master site and channel administrators have access to it.

7.2.1	function hourly_requests($link_id, $site_id, $timescale)

	Determines the total number of hits per hour for the specified
	channel over the timescale provided.    Corrects the times
	returned for the server time difference.

	SELECT hour,count(*) as hourly_requests FROM 
	myPHPcms_logging_log WHERE site_id='$site_id' $sub_sql GROUP 
	BY hour

7.2.2	function browser_types($link_id, $site_id, $timescale)

	Determines the page views by browser type for the channel
	specified over the timescale provided.

	SELECT browser, ver, platform, count(*) AS num_browsers FROM 
	myPHPcms_logging_log WHERE site_id='$site_id' $sub_sql GROUP 
	BY browser, ver, platform ORDER BY num_browsers DESC

7.2.3	function browser_unknown($link_id, $site_id, $timescale)

	Determines and list any unidentified browsers for the specified
	channel over the timescale specified.

7.2.4	function top_pages($link_id, $site_id, $timescale, $max_num)

	Retrieves all of the requested URL's for the specified channel
	over the time period specified and groups them by URL in 
	descending order to show the most popular.  The maximum number
	returned can be controlled.

	SELECT page,count(*) AS top_pages FROM myPHPcms_logging_log 
	WHERE site_id ='$site_id' $sub_sql GROUP BY page ORDER BY 
	top_pages DESC LIMIT $max_num

7.2.5	function bottom_pages($link_id, $site_id, $timescale, $max_num)

	Retrieves all of the requested URL's for the specified channel
	over the time period specified and groups them by URL in 
	ascending order to show the least popular.  The maximum number
	returned can be controlled.

	SELECT page,count(*) AS bot_pages FROM myPHPcms_logging_log 
	WHERE site_id ='$site_id' $sub_sql GROUP BY page ORDER BY 
	bot_pages ASC LIMIT $max_num

7.2.6	function total_page_views($link_id, $site_id)

	Counts the total number of page views since logging began for
	the specified channel.  This function requires two calls to the
	database.  Firstly to get the total number of pages:

	SELECT COUNT(*) FROM myPHPcms_logging_log WHERE site_id=
	'$site_id';";
	
	and secondly to determine when logging for this site began:
	
	SELECT FROM_UNIXTIME(MIN(time),'%D %M %Y') FROM 
	myPHPcms_logging_log WHERE site_id='$site_id'

7.2.7	function top_referrers($link_id, $site_id, $timescale, $max_num,
		$site_name)

	Retrieves all referrers (where known) for the specified channel,
	groups them together and lists them in descending order to show
	the most common.  The maximum number of values returned can be
	controlled.

	SELECT referrer,count(*) AS ref_count FROM myPHPcms_logging_log
	WHERE referrer!='' AND referrer LIKE 'http://%' AND 
	referrer!='unknown' AND referrer NOT LIKE $site_name AND 
	site_id='$site_id' $sub_sql GROUP BY referrer ORDER BY 
	ref_count DESC LIMIT $max_num

7.2.8	function top_hosts($link_id, $site_id, $timescale, $max_num)

	Retrieves all referring IP addresses for the specified channel,
	groups them together by IP address and lists them in descending
	order so that the most common can be identified.  The maximum
	number of values returned can be controlled.

	SELECT ip_address,count(*) AS top_hosts FROM 
	myPHPcms_logging_log WHERE ip_address!='unknown' AND site_id=
	'$site_id' $sub_sql GROUP BY ip_address ORDER BY top_hosts DESC
	LIMIT $max_num

7.2.9	function searches($link_id, $site_id, $timescale, $max_num)

	Searches all referrers to identify query strings for the 
	channel specified over the time period specified.  Looks for
	the words "query", "keywords", "q=" or "search".  Groups
	together these results to show the most common search requests.
	The maximum number that is returned can be controlled.

	SELECT referrer,count(*) AS top_searches FROM 
	myPHPcms_logging_log WHERE referrer LIKE '%search%' OR referrer
	LIKE '%query%' OR referrer LIKE '%keywords%' OR referrer LIKE 
	'%q=%' $sub_sql GROUP BY referrer ORDER BY top_searches DESC 
	LIMIT $max_num

7.2.10	function operating_sys($link_id, $site_id, $timescale, $max_num)

	Groups all requests for the specified channel over the time 
	period specified by operating system in descending order so
	that the most popular operating system can be identified.  The
	maximum number of results returned can be controlled.
	
	This function requires two database queries.  The first 
	determines the number of requests for each platform type:
	
	SELECT platform, count(*) AS platform_count FROM 
	myPHPcms_logging_log WHERE site_id='$site_id' $sub_sql GROUP 
	BY platform ORDER BY platform_count DESC LIMIT $max_num
	
	Whilst the second determines the total number of page requests
	in the time specified.  The percentages can then be determined:
	
	SELECT COUNT(*) FROM myPHPcms_logging_log WHERE site_id=
	'$site_id' $sub_sql

7.2.11	function top_entry($link_id, $site_id, $timescale, $max_num,
		$site_name)

	Determines the most common pages through which users enter the
	site.  Currently this is determined by finding all pages where
	the referrer does not contain the URL of the website.  These 
	are then grouped and sorted in descending order.  The maximum
	number of results returned can be controlled.

	SELECT page,referrer,COUNT(*) AS top_entry FROM 
	myPHPcms_logging_log WHERE site_id='$site_id' AND referrer NOT
	LIKE $site_name $sub_sql GROUP BY page ORDER by top_entry DESC
	LIMIT $max_num

7.2.12	function top_exit($link_id, $site_id, $timescale, $max_num)

	Determines the most popular exit links reported by the exit
	script.  These are grouped and are sorted in descending order.
	The maximum number of results returned can be controlled.

	SELECT exit_page,COUNT(*) AS totals FROM 
	myPHPcms_logging_log WHERE site_id='$site_id' AND exit_page 
	LIKE 'http://%' $sub_sql GROUP BY exit_page ORDER BY totals 
	DESC LIMIT $max_num

7.2.13	function unique_visitors($link_id, $site_id, $timescale)

	Determines the total number of unique session ID's for the
	channel specified over the period specified.
	
	SELECT COUNT(DISTINCT session_id) FROM myPHPcms_logging_log
	WHERE site_id='$site_id' $sub_sql

7.2.14	function fastest_pages($link_id, $site_id, $timescale, $max_num)

	Determine the fastest loading pages for the given channel_id
	over the timescale specified.
	
	SELECT page, page_time FROM myPHPcms_logging_log WHERE site_id=
	'$site_id' AND page_time!='0' GROUP BY page ORDER BY page_time 
	ASC LIMIT $max_num

7.2.15	function slowest_pages($link_id, $site_id, $timescale, $max_num)

	Determine the fastest loading pages for the given channel_id
	over the timescale specified.
	
	SELECT page, page_time FROM myPHPcms_logging_log WHERE site_id=
	'$site_id' AND page_time!='0' $sub_sql GROUP BY page ORDER BY 
	page_time DESC LIMIT $max_num

7.2.16	function cancelled_pages($link_id, $site_id, $timescale, $max_num)

	SELECT page,count(*) AS result FROM myPHPcms_logging_log WHERE 
	site_id='$site_id' AND page_time='0' $sub_sql GROUP BY page ORDER
	BY result DESC LIMIT $max_num

7.2.17	function session_pages($link_id, $site_id, $timescale, $max_num)

	Determines the number of pages viewed by each unique visitor
	over the specified timescale.
	
	SELECT session_id,count(*) AS result FROM myPHPcms_logging_log
	WHERE site_id='$site_id' AND page_time!='0' $sub_sql GROUP BY
	session_id ORDER BY result DESC LIMIT $max_num

7.2.18	function session_path($link_id, $site_id, $session_id)

	List the pages viewed by the specified visitor in the order
	that they viewed them complete with loading time.

	SELECT page,page_time FROM myPHPcms_logging_log WHERE 
	session_id='$session_id' AND page_time!='0' $sub_sql
	
7.2.19	function today()

	Returns the SQL necessary to limit query to data for the 
	current day.  This is usually called $sub_sql in other queries
	in this library.

7.2.20	function yesterday()

	Returns the SQL necessary to limit query to data for the 
	previous day.  This is usually called $sub_sql in other queries
	in this library.

7.2.21	function thisweek()

	Returns the SQL necessary to limit query to data for the 
	current week.  This is usually called $sub_sql in other queries
	in this library.

7.2.22	function thismonth()

	Returns the SQL necessary to limit query to data for the current 
	day.  This is usually called $sub_sql in other queries in this
	library.

7.2.23	function thisquarter()

	Returns the SQL necessary to limit query to data for the current 
	quarter.  This is usually called $sub_sql in other queries in 
	this library.

7.2.24	function lastquarter()

	Returns the SQL necessary to limit query to data for the previous
	quarter.  This is usually called $sub_sql in other queries in this
	library.

7.2.25	function thisyear()

	Returns the SQL necessary to limit query to data for the 
	current year.  This is usually called $sub_sql in other queries
	in this library.

7.2.26	function get_date($timescale)

	Based on the timescale specified for the query, calls the 
	relevant function to create the SQL necessary to limit the 
	scope of the query.

7.2.27	function return_empty()

	Error handler to fill the returned array from each function 
	with "none" if the SQL query returns empty.  This might occur
	if there were no data in the logging system.

7.2.28	function gethostname($link_id, $ip_address)

	Function to retrieve hostname from database if it's previously
	been resolved otherwise obtains the hostname by reverse DNS 
	lookup.  Results are stored in a table (myPHPcms_logging_cache)
	for use in subsequent queries.

7.3	inc_start.php

This is the PHP script that captures the logging information from PHP
pages.  It contains no functions.
	
7.4	inc_finish.php

This is the PHP script that is included at the end of the script to be
logged.  It contains no functions.
	
7.5	start.php

This is the fake 'GIF' image that captures the logging information from
static HTML files.  It contains no functions.

7.6	finish.php

This is the fake 'GIF' image that completes the logging process for a 
static HTML file.  It contains no functions.

7.7 	clear.gif

This is the GIF image that is returned to the browser after the 
execution of gif11.php.  It contains no functions.

7.8	redir.php

This is the script that allows hyperlinks on pages to be logged in 
order to determine where visitors are going when they leave the 
website.  It contains no functions.

7.9	logging.sql

This is the fragment of SQL code that builds the tables for the logging
system.
	
7.10	lib_browser.php

This is the browser detection library.

7.10.1	function detect_browser($link_id,$UA="") {
	
	Master function that controls the detection of the platform, 
	browser name and version.
	
7.10.2	function store_unknown($link_id,$UA) {
	
	Stores any unidentified user agent strings in the database and
	optionally emails them to the master site administrator.
		
7.10.3	function is_win($UA) {
	
	Determines the specific version of Windows.
	
7.10.4	function is_mac($UA) {
	
	Determines if this is a Mac of some kind.
	
7.10.5	function is_other($UA) {
	
	Check for various flavours of Linux/UNIX/other platforms.
	
7.10.6	function get_version($UA,$match,$field) {
	
	Having identified the browser, this function extracts the 
	version number from the supplied user agent string.

7.11	lib_timing.php

7.11.1	function timing_start($name, $session_id)

	Determines the current time and registers it indexing it by 
	page name and session ID as session variables.

7.11.2	function timing_stop($name, $session_id)

	Determines the current time and registers it indexing it by 
	page name and session ID as session variables.

7.11.3	function timing_current($name, $session_id)

	Given the page name and session ID this function retrieves the
	page start and stop times and determines the total page loading
	time which is then returned to the calling function.

<ENDS>
