myPHPcms Detailed Design document - Access Logging module
=========================================================

Version 0.1
-----------

EXECUTIVE SUMMARY

This document describes in detail the Access Logging Module.  It
provides information on the design of the module, the database design,
the individual scripts, any dependencies that these scripts may have 
and provides detailed references for each function in each file or 
library.

1.0	SCOPE

This document describes the design and operation of the Access Logging
module that allows page accesses to the website or channels to logged 
to a database.  This database can be interogated at any time by the 
site or channel administrators to determine the numbers and frequncies
of users, the most popular pages and the most frequently sought web
pages.

The system is applicable to both PHP scripts and static HTML pages 
allowing this system to be used to track both dynamic and static web
sites together with those that mix the two together through the use
of a static cache of dynamically generated web pages.


2.0	REFERENCE DOCUMENTATION

myPHPcms Functional Specification
myPHPcms High Level Design document


3.0	OVERVIEW

UPDATE	This section to include session logging to enable tracking of
	visitors through site.
	Considered timing script execution and logging but too complex
	for early releases.  MySQL table entry created for it though.
	Describe how might be done though through multi-GIFs or PHP 
	scripts using sessions
	Reports need to be created using lib_html.php

3.1	Requirements

Lifted straight from the Functional Specification:

* Should be able to determine platform
* Should be able to determine the operating system
* Must be able to detect all common browsers
* Must be able to detect search engine spiders
* Should be usable from PHP and HTML pages (to allow caching)
* Should email unknown user agent strings to site admin
* Users should not be aware of its presence
* Administrator should be able to look at results over different time 
  periods eg today, yesterday, this week, last week, this month, last
  month, this quarter, this year, last year
* Reporting function should provide the following information:
	* total files requested
	* total hits on channel
	* total pages served
	* total visits to channel
	* total unique sites that have visited
	* total unique URL's served
	* total unique referers
	* total unique user agents
	* hits per hour (average and maximum)
	* hits per day (average and maximum)
	* files per day (average and maximum)
	* pages per day (average and maximum)
	* visits per day (average and maximum)
	* path through site (based on PHP session - dynamic sites only)
	* all statistics displayed as top X of Y where X can be defined
	  and Y is the total number in that category since logging 
	  began
* Administrator should be able to see which pages are most popular, least
  popular, top referers, top exit pages, top search queries etc
* System can handle multiple channels
* Would be desireable for the logging system to record the amount of time
  taken for a page to be accessed each time it is accessed

3.2	Solution

TBD

3.2.1	Data gathering

Note that there are additional parameters that need to be specified for 
the 'GIF' solution.  These are specified in the Reference section at 
the end of this document.

The GIF solution is quite ingenious - instead of displaying a GIF it 
calls a PHP file located on a server that can run PHP which parse the
request, inserts the relevant data into the database and then passes 
through a transparent 1x1 GIF image ('clear.gif').

3.2.1.1	General considerations

* Must be able to detect all common browsers
* Must be able to detect search engine spiders
* Should be usable from PHP and HTML pages (to allow caching)
* Should email unknown user agent strings to site admin
* System can handle multiple channels

3.2.1.2	Browser version

TBD

3.2.2.3	Browser platform

* Should be able to determine platform

3.2.2.4	Operating system

* Should be able to determine the operating system

3.2.2.5	Page requests

TBD

3.2.2.6	Page loading time

* Would be desireable for the logging system to record the amount of time
  taken for a page to be accessed each time it is accessed

3.2.2.7	Exit pages

When the user leaves the site it can be desireable to know where they 
are going.  This can be useful in the context of tracking whether users
click on a banner or a link to another website.  To allow this is to be
monitored the following script can be used:

  <a href="logging/redir.php?e=http://www.phpbuilder.com">PHP Builder</a>

This inserts the URL of the link that the user has clicked on together 
with other data that can be gleaned from the execution of the script.  
The target URL is then opened in the same window as the request was 
made.

3.2.2	Data processing and reporting

Once the data is contained within the database it can be queried to 
generate the following information:

     * hourly requests
     * browser types
     * most requested pages
     * least requested pages
     * total page views since logging began
     * top referrers
     * top hosts requesting pages
     * top search strings
     * browser operating systems
     * top site entry pages
     * top site exit pages

It is suggested that this script be placed in a location that is only 
available to the site administrator such as $site_root/admin.

All of these functions support the specification of the site_id to be
investigated and (optionally) a maximum number of results that should 
be returned.  All results (with the exception of total page views since
logging began) can have the timescale over which the statistics should 
be reported defined by setting the $timescale to one of the following:
'today', 'yesterday', 'thisweek', 'thismonth', 'thisquarter', 
'thisyear'.

3.2.2.1	General considerations

Why use a database backed logging solution instead of log files ?
Basically because of information availability and speed.  Data is 
gathered on each hit that occurs on the site.  Analysis of this data
can be carried out at anytime and does not require the processing of 
long log files - instead this task can be carried out by a graphcal 
front-end which queries the logging database.  This means that any 
query run will be run on the most up to date data available.

3.2.2.2	Blah !

* Administrator should be able to look at results over different time 
  periods eg today, yesterday, this week, last week, this month, last
  month, this quarter, this year, last year
* Reporting function should provide the following information:
	* total files requested
	* total hits on channel
	* total pages served
	* total visits to channel
	* total unique sites that have visited
	* total unique URL's served
	* total unique referers
	* total unique user agents
	* hits per hour (average and maximum)
	* hits per day (average and maximum)
	* files per day (average and maximum)
	* pages per day (average and maximum)
	* visits per day (average and maximum)
	* path through site (based on PHP session - dynamic sites only)
	* all statistics displayed as top X of Y where X can be defined
	  and Y is the total number in that category since logging 
	  began
* Administrator should be able to see which pages are most popular, least
  popular, top referers, top exit pages, top search queries etc

3.3	Usage

The logging system can be applied to either PHP pages or HTML pages.  
Any requests made to the webserver will result in the following 
information being stored.

3.3.1	Dynamically generated PHP pages

Any request made to the webserver can be made to generate an SQL query
to log details of the request in the database.  If the file being 
requested is a PHP script then this can be achieved by including the 
following line somewhere in the script:

     include("$site_root/libs/inc_logger.php");

3.3.2	Static HTML pages

If, however, the page requested is purely an HTML page or it resides on
a server that does not allow the use of PHP then the following 'GIF' 
can be displayed on the page:

   <img src="gif11.php?site_id=0&page=index.html" width='1' height='1'>


4.0	DATABASE DESIGN

SQL data is defined in logging.sql

4.1	logging_log

	FIELD       DEFAULT      TYPICALLY
	day         '0'          20010924
	hour        '0'          18
	session_id  'unknown'    e11a0c6e30e09b9f67273fcd75949e51
	user_id     '0'          4
	site_id     '0'          0
	browser     'OTHER'      IE
	ver         '0'          5.5
	platform    'OTHER'      Win
	time        '0'          1001351949
	page        NULL         /dev/bugzilla.php
	ip_address  'unknown'    192.168.7.44
	remote_host 'unresolved' bimble.eurologic.com
	referrer    'unknown'
	exit_page   'unknown'    http://www.phpbuilder.com

4.2	logging_cache

Host name and IP address data is stored in the following format in 
MySQL in table logging_cache:

	FIELD       DEFAULT      TYPICALLY
	ip_address  none         192.168.7.24
	host_name   null         diamond.eurologic.com

4.3	logging_unknown

The user agent string is stored in the following format in the MySQL 
table logging_unknown

	FIELD       DEFAULT      TYPICALLY
	user_agent  None         Mozilla/4.0b2 (Win95; I)*
	
4.4	SQL query design

All of these techniques rely upon the insertion of data into the SQL 
database.  On a heavily used site this may result in some deterioration
of performance so, in order to minimise this, the SQL INSERTS are 
delayed until the table is free.



5.0	SOFTWARE COMPONENTS

The access logging system consists of the following files:

5.1	$SITE_ROOT/admin/adm_statistics.php

	This script allows the processing of the data gathered by the
	logging system.  It is intended to be executed by the site or
	channel administrators only.
	
5.2	$SITE_ROOT/admin/libs/lib_statistics.php

	Add description here.

5.3	$SITE_ROOT/logging/inc_logger.php

	This is the code snippet that is required to log access to PHP
	scripts.  It must be included into the script whose activity is
	to be logged.
	
5.4	$SITE_ROOT/logging/gif11.php

	This is a fake GIF file that static HTML pages can use to allow
	their pages to be logged by the logging system.  It provides
	exactly the same information as that provided by the PHP code
	snippet described above.

5.5 	$SITE_ROOT/logging/clear.gif

	This is a 1 pixel by 1 pixel transparent GIF file that is 
	echoed back to the users browser by the giff1.php script after 
	the logging information has been gathered.

5.6	$SITE_ROOT/logging/redir.php

	This script is used to wrap up destination URL's in order that
	user clicks onto hyperlinks can be tracked.  This script can
	also be used to track banner advert clicks (if required).

5.7	$SITE_ROOT/sql/logging.sql

	This is the SQL that creates the tables necessary for the 
	correct operation of the logging system.
	
5.8	$SITE_ROOT/lib_browser.php

	This is the library that identifies the browser type and 
	version, the operating system and the hardware platform from
	the User Agent string reported by the browser.


6.0	DEPENDENCIES

This module requires access to the database in order to store the data
that it collects about the users browser.  In order to identify the 
users browser this module requires the browser identification library
lib_browser.php.


7.0	REFERENCE

This section describes in detail the internal and external functions
that are available in each of the scripts that make up the Access 
Logging module.  The functions are grouped together by script name.

7.1	adm_statistics.php

This is the administration module for the access logging system.  It is
located in a direcotry to which only the master site and channel 
administrators have access to.

7.1.1	function hourly_requests($link_id, $site_id, $timescale)

	Lists the number of hits per hour for the given $site_id and 
	$timescale.

7.1.2	function browser_types($link_id, $site_id, $timescale)

	Lists the browser name, vesion, platform and percentage share 
	of all requests for the specfied $site_id over the specified 
	$timescale in descending order of popularity.

7.1.3	function top_pages($link_id, $site_id, $timescale, $max_num)

	Lists the most frequently requested pages for the site with the 
	matching $site_id over the time period $timescale in descending
	order.  Results are limited to $max_num rows of data.

7.1.4	function bottom_pages($link_id, $site_id, $timescale, $max_num)

	Lists the least popular pages for the site matching $site_id 
	over the time period $timescale.  Results are limited to the 
	$max_num rows.

7.1.5	function total_page_views($link_id, $site_id)

	Determines the total number of page requests since the site 
	began logging.

7.1.6	function top_referrers($link_id, $site_id, $timescale, $max_num)

	Lists the most common referers for site $site_id over the time 
	period $timescale.  Results are limited to $max_num rows.  The 
	returned values are presented as hyperlinks so that they may be 
	clicked.

7.1.7	function top_hosts($link_id, $site_id, $timescale, $max_num)

	Lists the most common hosts that request pages for site 
	$site_id over the time period $timescale.  Results are 
	limited to $max_num rows.  Where possible the host IP 
	addresses are resolved via a reverse DNS lookup.  To speed 
	subsequent runs of this query the host IP addresses and names 
	are cached in the database table logging_cache.  The returned
	values are presented as hyperlinks so that they may be clicked
	for investigation.

7.1.8	function searches($link_id, $site_id, $timescale, $max_num)

	Lists the most common queries that have been executed to find 
	the site.  This information is obtained by searching all 
	referring URLs for the words 'search' and 'query'.  Results are
	limited to $max_num rows.
     
7.1.8	function operating_sys($link_id, $site_id, $timescale, $max_num)

	Lists the most common operating systems used to access the site
	$site_id over the specified time scale $timeperiod.  The number
	of rows returned is limited to $max_num.

7.1.9	function top_entry($link_id, $site_id, $timescale, $max_num)

	Lists the most commonly seen page by visitors when they enter 
	the site $site_id.  In theory this will be the home page but if
	enough traffic comes in from a link then it may be the page 
	that has been linked to.  The time period over which the query 
	runs can be set from the $timescale variable.  The number of 
	rows returned is defined by the value of the $max_num variable.

7.1.10	function top_exit($link_id, $site_id, $timescale, $max_num)

	Lists the most commonly departed pages from site $site_id to 
	allow the estimation of traffic flows to another site or 
	perhaps an advert.  The number of rows returned is set by 
	$max_num.

7.2	lib_statistics.php

This is the query library for the administration module for the access
logging system.  It is placed in the admin/lib directory where only the
master site and channel administrators have access to it.

7.2.1	function hourly_requests($link_id, $site_id, $timescale)

	Determines the total number of hits per hour for the specified
	channel over the timescale provided.    Corrects the times
	returned for the server time difference.

7.2.2	function browser_types($link_id, $site_id, $timescale)

	Determines the page views by browser type for the channel
	specified over the timescale provided.

7.2.3	function browser_unknown($link_id, $site_id, $timescale)

	Determine and list any unidentified browsers for the specified
	channel over the timescale specified.
	
	NOT YET COMPLETE.

7.2.4	function top_pages($link_id, $site_id, $timescale, $max_num)

	Retrieves all of the requested URL's for the specified channel
	over the time period specified and groups them by URL in 
	descending order to show the most popular.  The maximum number
	returned can be controlled.

7.2.5	function bottom_pages($link_id, $site_id, $timescale, $max_num)

	Retrieves all of the requested URL's for the specified channel
	over the time period specified and groups them by URL in 
	ascending order to show the least popular.  The maximum number
	returned can be controlled.

7.2.6	function total_page_views($link_id, $site_id)

	Counts the total number of page views since logging began for
	the specified channel.

7.2.7	function top_referrers($link_id, $site_id, $timescale, $max_num)

	Retrieves all referrers (where known) for the specified channel,
	groups them together and lists them in descending order to show
	the most common.  The maximum number of values returned can be
	controlled.

7.2.8	function top_hosts($link_id, $site_id, $timescale, $max_num)

	Retrieves all referring IP addresses for the specified channel,
	groups them together by IP address and lists them in descending
	order so that the most common can be identified.  The maximum
	number of values returned can be controlled.

7.2.9	function searches($link_id, $site_id, $timescale, $max_num)

	Searches all referrers to identify query strings for the 
	channel specified over the time period specified.  Looks for
	the words "query", "keywords", "q=" or "search".  Groups
	together these results to show the most common search requests.
	The maximum number that is returned can be controlled.

7.2.10	function operating_sys($link_id, $site_id, $timescale, $max_num)

	Groups all requests for the specified channel over the time 
	period specified by operating system in descending order so
	that the most popular platform can be identified.  The maximum
	number of results returned can be controlled.

7.2.11	function top_entry($link_id, $site_id, $timescale, $max_num)

	Determines the most common pages through which users enter the
	site.  Currently this is determined by finding all pages where
	the referrer does not contain the URL of the website.  These 
	are then grouped and sorted in descending order.  The maximum
	number of results returned can be controlled.

7.2.12	function top_exit($link_id, $site_id, $timescale, $max_num)

	Determines the most popular exit links reported by the exit
	script.  These are grouped and are sorted in descending order.
	The maximum number of results returned can be controlled.

7.2.13	function unique_visitors($link_id, $site_id, $timescale)

	Determines the total number of unique session ID's for the
	channel specified over the period specified.
	
	Not yet finished.

7.2.14	function users_online()

	Determine the number of people on-line for the specified
	channel.
	
	Not yet complete.

7.2.15	function session_length()

	Determines the length of each unique session.
	
	Not yet complete.

7.2.16	function today()

	Returns SQL necessary to limit query to data for current day.

7.2.17	function yesterday()

	Returns SQL necessary to limit query to data for previous day.

7.2.18	function thisweek()

	Returns SQL necessary to limit query to data for current week.

7.2.19	function thismonth()

	Returns SQL necessary to limit query to data for current month.

7.2.20	function thisquarter()

	Returns SQL necessary to limit query to data for current three
	month period.

7.2.21	function lastquarter()

	Not complete.

7.2.22	function thisyear()

	Returns SQL necessary to limit query to data for current year.

7.2.23	function get_date($timescale)

	Based on the timescale specified for the query, calls the 
	relevant function to create the SQL necessary to limit the 
	scope of the query.

7.2.24	function return_empty()

	Error handler to fill the returned array from each function 
	with "none" if the SQL query returns empty.  This might occur
	if there were no data in the logging system.

7.2.25	function gethostname($link_id, $ip_address)

	Function to retrieve hostname from database if it's previously
	been resolved otherwise obtains the hostname by reverse DNS 
	lookup.  Results are stored in a table (logging_cache) for use
	in subsequent queries.

7.3	inc_logger.php

This is the PHP script that captures the logging information from PHP
pages.  It contains no functions.
	
7.4	gif11.php

This is the fake 'GIF' image that captures the logging information from
static HTML files.  It contains no functions.

7.5 	clear.gif

This is the GIF image that is returned to the browser after the 
execution of gif11.php.  It contains no functions.

7.6	redir.php

This is the script that allows hyperlinks on pages to be logged in 
order to determine where visitors are going when they leave the 
website.  It contains no functions.

7.7	logging.sql

This is the fragment of SQL code that builds the tables for the logging
system.
	
7.8	lib_browser.php

This is the browser detection library.

7.8.1	function detect_browser($link_id,$UA="") {
	
	Master function that controls the detection of the platform, 
	browser name and version.
	
7.8.2	function store_unknown($link_id,$UA) {
	
	Stores any unidentified user agent strings in the database and
	optionally emails them to the master site administrator.
		
7.8.3	function is_win($UA) {
	
	Determines the specific version of Windows.
	
7.8.4	function is_mac($UA) {
	
	Determines if this is a Mac of some kind.
	
7.8.5	function is_other($UA) {
	
	Check for various flavours of Linux/UNIX/other platforms.
	
7.8.6	function get_version($UA,$match,$field) {
	
	Having identified the browser, this function extracts the 
	version number from the supplied user agent string.

<ENDS>